import React, { useState, useEffect, useRef, useCallback } from 'react';
import { useSelector } from 'react-redux';
import { lawyerAPI } from '../api/apiService';
import { MdLocationOn, MdMyLocation, MdLocationSearching } from 'react-icons/md';
import Lottie from 'react-lottie-player';
import { debounce } from 'lodash';

// Import animation files
import locationSearchAnimation from '../assets/animations/location-search.json';
import lawyerSearchAnimation from '../assets/animations/lawyer-search.json';
import {
  FaFilter,
  FaUserTie,
  FaBriefcase,
  FaMapMarkerAlt,
  FaStar,
  FaClock,
  FaEnvelopeOpenText,
  FaCheckCircle,
  FaPhoneAlt,
  FaCalendarAlt,
  FaChevronLeft,
  FaChevronRight,
  FaSearch,
  FaTimes,
  FaRegClock,
  FaUserCheck,
  FaMoneyBillWave,
  FaArrowLeft,
  FaHourglassHalf,
  FaCalendarCheck,
  FaLongArrowAltRight,
  FaGraduationCap,
  FaShieldAlt,
  FaBolt,
  FaHeart,
  FaStarHalfAlt,
  FaEnvelope,
  FaUsers,
  FaGavel,
  FaBuilding,
  FaPassport,
  FaHome,
  FaFileInvoiceDollar,
  FaCopyright,
  FaRegStar,
  FaCheck,
  FaInfoCircle,
  FaPhone
} from 'react-icons/fa';

// Professional color palette
const colors = {
  light: {
    background: '#F8F9FA',
    surface: '#FFFFFF',
    text: {
      primary: '#1E293B',
      secondary: '#64748B',
      muted: '#94A3B8'
    },
    accent: {
      primary: '#0EA5E9',
      secondary: '#38BDF8',
      gradient: 'linear-gradient(135deg, #0EA5E9 0%, #38BDF8 100%)'
    },
    border: '#E2E8F0',
    success: '#10B981',
    warning: '#F59E0B',
    error: '#EF4444'
  },
  dark: {
    background: '#0F172A',
    surface: '#1E293B',
    text: {
      primary: '#F1F5F9',
      secondary: '#CBD5E1',
      muted: '#94A3B8'
    },
    accent: {
      primary: '#38BDF8',
      secondary: '#0EA5E9',
      gradient: 'linear-gradient(135deg, #38BDF8 0%, #0EA5E9 100%)'
    },
    border: '#334155',
    success: '#10B981',
    warning: '#F59E0B',
    error: '#EF4444'
  }
};

// Categories for filtering
const categories = [
  'All',
  'Criminal',
  'Family',
  'Corporate',
  'Immigration',
  'Civil',
  'Labor Law',
  'Tax Law',
  'Intellectual Property'
];

// Sample data for development and fallback
const sampleLawyers = Array.from({ length: 12 }).map((_, i) => ({
  id: i + 1,
  full_name: [
    'Rajesh Kumar',
    'Priya Sharma',
    'Vikram Singh',
    'Ananya Patel',
    'Arjun Mehta',
    'Neha Gupta',
    'Sanjay Verma',
    'Divya Joshi',
    'Rahul Malhotra',
    'Meera Kapoor',
    'Aditya Reddy',
    'Kavita Nair'
  ][i],
  specialization: [
    'Criminal',
    'Family',
    'Corporate',
    'Immigration',
    'Civil',
    'Labor Law',
    'Tax Law',
    'Intellectual Property',
    'Criminal',
    'Family',
    'Corporate',
    'Immigration'
  ][i],
  years_of_experience: 5 + (i % 15),
  bar_association: [
    'Delhi Bar Association',
    'Mumbai Bar Association',
    'Bangalore Bar Association',
    'Chennai Bar Association',
    'Kolkata Bar Association',
    'Hyderabad Bar Association',
    'Pune Bar Association',
    'Ahmedabad Bar Association',
    'Lucknow Bar Association',
    'Jaipur Bar Association',
    'Chandigarh Bar Association',
    'Kochi Bar Association'
  ][i],
  consultation_fee: 1500 + (i * 500),
  phone_number: `+91 98765 4${i}${i}${i}${i}`,
  email: `lawyer${i+1}@example.com`,
  license_number: `BCI/${100000 + i}/${2010 + (i % 10)}`,
  is_verified: i % 3 === 0,
  profile_picture_url: null,
  reviews_count: i * 5,
  appointments_count: i * 3,
  bio: `Experienced ${['Criminal', 'Family', 'Corporate', 'Immigration', 'Civil', 'Labor Law', 'Tax Law', 'Intellectual Property'][i % 8]} lawyer with ${5 + (i % 15)} years of practice. Specializing in complex cases with a high success rate.`
}));

// Time slots
const timeSlots = [
  '09:00 AM', '10:00 AM', '11:00 AM', '12:00 PM', 
  '01:00 PM', '02:00 PM', '03:00 PM', '04:00 PM', '05:00 PM'
];

/**
 * LegalCosultation Component
 * 
 * This component fetches and displays a list of lawyers from the API,
 * with filtering, pagination, location-based search, and detailed view functionality.
 */
const LegalCosultation = () => {
  // Get dark mode state from Redux
  const { mode } = useSelector((state) => state.theme);
  const isDarkMode = mode === 'dark';
  const currentTheme = isDarkMode ? colors.dark : colors.light;
  
  // State for lawyers data
  const [lawyers, setLawyers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [initialLoading, setInitialLoading] = useState(true);
  const [loadingMore, setLoadingMore] = useState(false);
  const [error, setError] = useState(null);
  const [hasMore, setHasMore] = useState(true);
  
  // State for UI controls
  const [selectedCategory, setSelectedCategory] = useState('All');
  const [searchQuery, setSearchQuery] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const [showFilters, setShowFilters] = useState(false);
  const [isFilterSticky, setIsFilterSticky] = useState(false);
  const [view, setView] = useState('lawyers');
  const [selectedLawyer, setSelectedLawyer] = useState(null);
  const [bookingDate, setBookingDate] = useState('');
  const [bookingTime, setBookingTime] = useState('');
  const [bookingFormData, setBookingFormData] = useState({
    name: '',
    email: '',
    phone: '',
    caseDetails: '',
  });
  const [bookingStep, setBookingStep] = useState(1);
  const [bookingComplete, setBookingComplete] = useState(false);
  
  // Location-based search state
  const [userLocation, setUserLocation] = useState(null);
  const [locationSearching, setLocationSearching] = useState(false);
  const [locationError, setLocationError] = useState(null);
  const [locationEnabled, setLocationEnabled] = useState(false);
  const [nearbyLoading, setNearbyLoading] = useState(false);
  const [topRatedLoading, setTopRatedLoading] = useState(false);
  
  // Refs for scrolling and infinite loading
  const contentRef = useRef(null);
  const observerRef = useRef(null);
  const loadMoreRef = useRef(null);
  
  /**
   * Fetch lawyers from the API with optional filtering
   * @param {boolean} loadMore - Whether to load more data or reset
   */
  const fetchLawyers = useCallback(async (loadMore = false) => {
    // Prevent duplicate API calls
    if ((loading && !loadMore) || (loadingMore && loadMore)) {
      console.log(`Skipping duplicate fetch request (loadMore: ${loadMore})`);
      return;
    }
    
    console.log(`Fetching lawyers (loadMore: ${loadMore})`);
    
    // Set loading states
    if (loadMore) {
      setLoadingMore(true);
    } else {
      setInitialLoading(true);
      setLoading(true);
      // Don't clear lawyers immediately to prevent flickering
      // Only clear when we have new data or an error
      setCurrentPage(1);
    }
    setError(null);
    
    try {
      // Prepare parameters for API call
      const params = {
        page: loadMore ? currentPage + 1 : 1,
        per_page: 9
      };
      
      if (selectedCategory !== 'All') {
        console.log(`Filtering by category: ${selectedCategory}`);
        params.specialization = selectedCategory;
      } else {
        console.log('Showing all categories');
      }
      
      if (searchQuery && searchQuery.trim() !== '') {
        const query = searchQuery.trim();
        const isNumeric = !isNaN(query) && !isNaN(parseFloat(query));
        
        console.log(`Searching with query: "${query}" (${isNumeric ? 'numeric' : 'text'})`);
        
        if (isNumeric) {
          // If search query is a number, search by years of experience
          params.years_of_experience = parseInt(query);
        } else {
          // Otherwise search by name or specialization
          params.search = query;
        }
      }
      
      // Add location parameters if location is enabled
      if (locationEnabled && userLocation) {
        console.log(`Using location: ${userLocation.latitude}, ${userLocation.longitude}`);
        params.latitude = userLocation.latitude;
        params.longitude = userLocation.longitude;
        params.radius = 50; // Search radius in kilometers
        params.sort = 'distance'; // Sort by distance
      }
      
      console.log('Fetching lawyers with params:', params);
      
      // Call the API using lawyerAPI service
      try {
        const response = await lawyerAPI.getLawyers(params);
        console.log('API Response:', response);
        
        // Check if the response has the expected structure
        if (response && (response.success || response.data)) {
          // Extract data based on API response structure
          const responseData = response.data || response;
          const newLawyers = Array.isArray(responseData) 
            ? responseData 
            : (responseData.data || []);
          
          console.log('API returned lawyers:', newLawyers.length);
          
          // Now that we have data, we can safely update the lawyers array
          if (loadMore) {
            setLawyers(prevLawyers => [...prevLawyers, ...newLawyers]);
          } else {
            // Clear previous lawyers and set new ones
            setLawyers(newLawyers);
          }
          
          // Check if there are more pages - handle different API response structures
          const totalItems = responseData.total || newLawyers.length;
          const itemsPerPage = responseData.per_page || params.per_page;
          const totalPages = Math.ceil(totalItems / itemsPerPage);
          
          setHasMore(params.page < totalPages);
          
          // Update current page
          if (loadMore) {
            setCurrentPage(prevPage => prevPage + 1);
          }
        } else {
          console.warn('API response format unexpected:', response);
          throw new Error('Failed to fetch lawyers data');
        }
      } catch (apiError) {
        console.error('API Error:', apiError);
        
        // Fallback to sample data if API fails
        console.log('Falling back to sample data');
        
        // Filter the sample data based on category and search query
        let filteredData = [...sampleLawyers];
        
        // Apply category filter
        if (selectedCategory !== 'All') {
          console.log(`Filtering by category: ${selectedCategory}`);
          filteredData = filteredData.filter(lawyer => 
            lawyer.specialization === selectedCategory
          );
        }
        
        // Apply search query filter
        if (searchQuery && searchQuery.trim() !== '') {
          const query = searchQuery.toLowerCase().trim();
          const isNumeric = !isNaN(query) && !isNaN(parseFloat(query));
          
          console.log(`Filtering by search query: "${query}" (${isNumeric ? 'numeric' : 'text'})`);
          
          filteredData = filteredData.filter(lawyer => {
            // If query is a number, match with years of experience
            if (isNumeric) {
              const yearsExp = parseInt(lawyer.years_of_experience);
              return yearsExp === parseInt(query);
            }
            
            // Otherwise match with name or specialization
            return lawyer.full_name.toLowerCase().includes(query) || 
                   lawyer.specialization.toLowerCase().includes(query);
          });
        }
        
        // Apply location filtering if enabled (simplified for sample data)
        if (locationEnabled && userLocation) {
          console.log('Applying location-based filtering');
          // For sample data, we'll just randomize the order to simulate location-based sorting
          filteredData = filteredData.sort(() => Math.random() - 0.5);
        }
        
        // Paginate the data
        const perPage = 9;
        const totalItems = filteredData.length;
        
        console.log(`Total filtered lawyers: ${totalItems}`);
        
        // Get the current page of data
        const startIndex = loadMore ? lawyers.length : 0;
        const endIndex = startIndex + perPage;
        const newData = filteredData.slice(startIndex, endIndex);
        
        console.log(`Displaying lawyers ${startIndex+1} to ${Math.min(endIndex, totalItems)} of ${totalItems}`);
        
        // Set the data in state
        if (loadMore) {
          setLawyers(prevLawyers => [...prevLawyers, ...newData]);
        } else {
          setLawyers(newData);
        }
        
        // Check if there are more items to load
        setHasMore(endIndex < totalItems);
      }
    } catch (err) {
      console.error('Error fetching lawyers:', err);
      setError('Failed to load lawyers. Please try again later.');
      
      // Only clear lawyers if it's not a load more operation
      if (!loadMore) {
        setLawyers([]);
      }
      
      // Set hasMore to false to prevent further loading attempts
      setHasMore(false);
    } finally {
      // Add a small delay before removing loading states to prevent UI flicker
      setTimeout(() => {
        setLoading(false);
        setInitialLoading(false);
        setLoadingMore(false);
      }, 300);
    }
  // Include dependencies that affect the API call
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [currentPage, selectedCategory, searchQuery, locationEnabled, userLocation]);

  // Initial data fetch when component mounts
  useEffect(() => {
    // Create a flag to track if this is the first mount
    const isFirstMount = useRef(true);
    
    if (view === 'lawyers' && isFirstMount.current) {
      console.log('Initial data fetch on first component mount');
      
      // Reset filters on initial load
      setSelectedCategory('All');
      setSearchQuery('');
      setLocationEnabled(false);
      
      // Show loading state immediately
      setInitialLoading(true);
      setLoading(true);
      
      // Use setTimeout to ensure loading state is visible before fetch
      setTimeout(() => {
        fetchLawyers(false);
      }, 300);
      
      // Mark as no longer first mount
      isFirstMount.current = false;
    }
    // Only run this effect on initial mount and when view changes
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [view]);
  
  // Set up infinite scrolling with Intersection Observer
  useEffect(() => {
    // Only set up observer if we're in the lawyers view, have more data to load, and aren't currently loading
    if (!loadingMore && hasMore && view === 'lawyers' && lawyers.length > 0) {
      console.log('Setting up infinite scroll observer');
      
      const observer = new IntersectionObserver(
        entries => {
          if (entries[0].isIntersecting && !loadingMore && hasMore) {
            console.log('Infinite scroll triggered, loading more lawyers');
            fetchLawyers(true);
          }
        },
        { threshold: 0.5 }
      );
      
      // Only observe if the element exists
      if (loadMoreRef.current) {
        observer.observe(loadMoreRef.current);
      }
      
      observerRef.current = observer;
      
      return () => {
        if (observerRef.current) {
          observerRef.current.disconnect();
        }
      };
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [loadingMore, hasMore, view, lawyers.length]);
  
  // Clean up loading states and cancel any pending operations when component unmounts
  useEffect(() => {
    // Create a flag to track if component is mounted
    let isMounted = true;
    
    // Create a cleanup function
    return () => {
      // Mark component as unmounted
      isMounted = false;
      
      // No need to cancel debounced searches as we're using useEffect with cleanup
      
      console.log('Component unmounted, cleaned up all pending operations');
    };
  }, []);

  // We're now using useEffect with setTimeout for debouncing search
  
  // Handle search input change
  const handleSearchChange = (e) => {
    const query = e.target.value;
    console.log(`Search input changed: "${query}"`);
    
    // Always update the input field immediately
    setSearchQuery(query);
    
    // Prevent search if already loading
    if (loading) {
      console.log('Skipping search input change because already loading');
      return;
    }
    
    // If query is empty and previous query wasn't empty, reset immediately
    if (!query.trim() && searchQuery.trim()) {
      console.log('Search cleared, resetting results');
      setInitialLoading(true);
      setLoading(true);
      setLawyers([]);
      setTimeout(() => {
        fetchLawyers(false);
      }, 300);
    }
    
    // For non-empty queries, the useEffect with debounce will handle the search
  };
  
  // Use useEffect with debounce for search
  useEffect(() => {
    // Skip empty queries, initial render, and when already loading
    if (!searchQuery.trim() || loading) return;
    
    // Track if this effect should continue (for cleanup)
    let isActive = true;
    
    // Create a timeout for debounce
    const timeoutId = setTimeout(() => {
      // Only proceed if component is still mounted and effect is active
      if (isActive) {
        console.log(`Debounced search for: "${searchQuery}"`);
        
        // Show loading state immediately
        setInitialLoading(true);
        setLoading(true);
        
        // Clear current results to prevent showing old data
        setLawyers([]);
        
        // Reset current page
        setCurrentPage(1);
        
        // Fetch with the new query
        fetchLawyers(false);
      }
    }, 800); // 800ms debounce time
    
    // Cleanup function to cancel the timeout if searchQuery changes before timeout completes
    return () => {
      isActive = false;
      clearTimeout(timeoutId);
    };
    
  // We only want this to run when searchQuery changes
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [searchQuery]);
  
  // Handle search form submission (for mobile)
  const handleSearch = (e) => {
    e.preventDefault();
    
    // Skip if already loading
    if (loading) {
      console.log('Skipping search form submission because already loading');
      return;
    }
    
    console.log('Search form submitted');
    
    // Show loading state immediately
    setInitialLoading(true);
    setLoading(true);
    
    // Clear current results to prevent showing old data
    setLawyers([]);
    
    // Reset current page
    setCurrentPage(1);
    
    // Use setTimeout to ensure state is updated before fetch
    setTimeout(() => {
      fetchLawyers(false);
    }, 300);
  };
  
  /**
   * Get user's current location
   */
  const getUserLocation = () => {
    // Skip if already searching for location
    if (locationSearching) {
      console.log('Already searching for location, skipping duplicate request');
      return;
    }
    
    if (!navigator.geolocation) {
      setLocationError('Geolocation is not supported by your browser');
      return;
    }
    
    console.log('Getting user location');
    setLocationSearching(true);
    setLocationError(null);
    
    navigator.geolocation.getCurrentPosition(
      (position) => {
        const { latitude, longitude } = position.coords;
        console.log(`Location obtained: ${latitude}, ${longitude}`);
        
        setUserLocation({ latitude, longitude });
        setLocationEnabled(true);
        setLocationSearching(false);
        
        // Show loading state immediately
        setInitialLoading(true);
        setLoading(true);
        setLawyers([]);
        
        // Fetch lawyers with the new location
        setCurrentPage(1);
        
        // Use setTimeout to ensure state is updated before fetch
        setTimeout(() => {
          fetchLawyers(false);
        }, 300);
      },
      (error) => {
        setLocationSearching(false);
        switch (error.code) {
          case error.PERMISSION_DENIED:
            setLocationError('Location permission denied. Please enable location services.');
            break;
          case error.POSITION_UNAVAILABLE:
            setLocationError('Location information is unavailable.');
            break;
          case error.TIMEOUT:
            setLocationError('The request to get user location timed out.');
            break;
          default:
            setLocationError('An unknown error occurred while getting location.');
            break;
        }
      },
      { enableHighAccuracy: true, timeout: 15000, maximumAge: 10000 }
    );
  };
  
  /**
   * Toggle location-based search
   */
  const toggleLocationSearch = () => {
    // Skip if already loading
    if (loading || locationSearching) {
      console.log('Skipping location toggle because already loading');
      return;
    }
    
    console.log(`Toggling location search: ${!locationEnabled}`);
    
    if (locationEnabled) {
      // Disable location-based search
      setInitialLoading(true);
      setLoading(true);
      setLawyers([]);
      setLocationEnabled(false);
      setCurrentPage(1);
      
      // Use setTimeout to ensure state is updated before fetch
      setTimeout(() => {
        fetchLawyers(false);
      }, 300);
    } else {
      // Enable location-based search
      getUserLocation();
    }
  };
  
  /**
   * Fetch nearby lawyers
   */
  const fetchNearbyLawyers = async () => {
    // Skip if already loading
    if (loading || nearbyLoading) {
      console.log('Skipping nearby lawyers fetch because already loading');
      return;
    }
    
    // If we don't have user location, get it first
    if (!userLocation) {
      getUserLocation();
      return;
    }
    
    console.log('Fetching nearby lawyers');
    
    // Show loading states immediately
    setInitialLoading(true);
    setLoading(true);
    setNearbyLoading(true);
    
    // Clear current results to prevent showing old data
    setLawyers([]);
    setCurrentPage(1);
    
    // Enable location filtering
    setLocationEnabled(true);
    
    try {
      const params = {
        latitude: userLocation.latitude,
        longitude: userLocation.longitude,
        radius: 25, // 25km radius
        sort: 'distance',
        per_page: 9
      };
      
      console.log('Fetching nearby lawyers with params:', params);
      
      try {
        const response = await lawyerAPI.getLawyers(params);
        
        if (response && response.success) {
          const responseData = response.data;
          const newLawyers = responseData.data || [];
          
          console.log(`Found ${newLawyers.length} nearby lawyers`);
          
          // Update the lawyers list
          setLawyers(newLawyers);
          
          // Check if there are more pages
          const totalPages = Math.ceil((responseData.total || 0) / (responseData.per_page || 9));
          setHasMore(params.page < totalPages);
        } else {
          throw new Error('Failed to fetch nearby lawyers');
        }
      } catch (apiError) {
        console.error('API Error:', apiError);
        console.log('Falling back to sample data for nearby lawyers');
        
        // Fallback to sample data
        const sortedLawyers = [...sampleLawyers].sort(() => Math.random() - 0.5); // Random sort to simulate nearby
        
        // Add distance property to simulate nearby lawyers
        const lawyersWithDistance = sortedLawyers.map(lawyer => ({
          ...lawyer,
          distance: (Math.random() * 20).toFixed(1) // Random distance between 0-20km
        }));
        
        setLawyers(lawyersWithDistance.slice(0, 9));
        setHasMore(sortedLawyers.length > 9);
      }
    } catch (err) {
      console.error('Error fetching nearby lawyers:', err);
      setError('Failed to load nearby lawyers. Please try again.');
    } finally {
      // Add a small delay before removing loading states to prevent UI flicker
      setTimeout(() => {
        setNearbyLoading(false);
        setLoading(false);
        setInitialLoading(false);
      }, 300);
    }
  };
  
  /**
   * Fetch top-rated lawyers
   */
  const fetchTopRatedLawyers = async () => {
    // Skip if already loading
    if (loading || topRatedLoading) {
      console.log('Skipping top-rated lawyers fetch because already loading');
      return;
    }
    
    console.log('Fetching top-rated lawyers');
    
    // Show loading states
    setInitialLoading(true);
    setLoading(true);
    setTopRatedLoading(true);
    
    // Clear current results
    setLawyers([]);
    setCurrentPage(1);
    
    try {
      const params = {
        sort: 'rating',
        per_page: 9
      };
      
      try {
        const response = await lawyerAPI.getLawyers(params);
        
        if (response && response.success) {
          const responseData = response.data;
          setLawyers(responseData.data || []);
          
          // Check if there are more pages
          const totalPages = Math.ceil((responseData.total || 0) / (responseData.per_page || 9));
          setHasMore(params.page < totalPages);
        } else {
          throw new Error('Failed to fetch top-rated lawyers');
        }
      } catch (apiError) {
        console.error('API Error:', apiError);
        // Sort sample data by reviews_count (as a proxy for rating)
        const sortedLawyers = [...sampleLawyers].sort((a, b) => b.reviews_count - a.reviews_count);
        setLawyers(sortedLawyers.slice(0, 9));
        setHasMore(sortedLawyers.length > 9);
     {/* Search Input in Right Corner }
    } catch (err) {
      console.error('Error fetching top-rated lawyers:', err);
    } finally {
      // Add a small delay before removing loading states to prevent UI flicker
      setTimeout(() => {
        setTopRatedLoading(false);
        setLoading(false);
        setInitialLoading(false);
      }, 300);
    }
  };

  // Handle sticky filter bar
  useEffect(() => {
    const handleScroll = () => {
      const offset = window.scrollY;
      setIsFilterSticky(offset > 20);
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  // Function to handle booking form submission
  const handleBookingSubmit = (e) => {
    e.preventDefault();
    if (bookingStep === 1) {
      if (bookingDate && bookingTime) {
        setBookingStep(2);
      }
    } else if (bookingStep === 2) {
      setBookingComplete(true);
    }
  };

  /**
   * Scroll to top of the content
   */
  const scrollToTop = () => {
    if (contentRef.current) {
      contentRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' });
    } else {
      window.scrollTo({
        top: 0,
      behavior: 'smooth'
      });
    }
  };

  // Function to view lawyer details
  const viewLawyerDetails = (lawyer) => {
    setSelectedLawyer(lawyer);
    setView('detail');
    scrollToTop();
  };

  // Function to start booking process
  const startBooking = (lawyer) => {
    setSelectedLawyer(lawyer);
    setView('booking');
    setBookingStep(1);
    setBookingComplete(false);
    scrollToTop();
  };

  // Function to go back to previous view
  const goBack = () => {
    if (view === 'detail') {
      setView('lawyers');
      setSelectedLawyer(null);
      scrollToTop();
    } else if (view === 'booking') {
      if (bookingStep > 1 && !bookingComplete) {
        setBookingStep(bookingStep - 1);
      } else if (bookingComplete) {
        setView('lawyers');
        setSelectedLawyer(null);
        setBookingComplete(false);
        setBookingStep(1);
        scrollToTop();
      } else         setView('detail');
        scrollToTop();
      }
    }
  };

  // Generate dates for the next 7 days
  const nextSevenDays = Array.from({ length: 7 }).map((_, i) => {
    const date = new Date();
    date.setDate(date.getDate() + i);
    return {
      dayName: date.toLocaleDateString('en-US', { weekday: 'short' }),
      dayNumber: date.getDate(),
      month: date.toLocaleDateString('en-US', { month: 'short' }),
      fullDate: date.toISOString().split('T')[0],
    };
  });

  /**
   * Render star rating based on rating value
   * @param {number} rating - The rating value (e.g., 4.5)
   * @returns {Array} Array of star components
   */
  const renderStars = (rating) => {
    if (!rating) return Array(5).fill(<FaStar className="text-slate-300" />);
    
    const stars = [];
    const fullStars = Math.floor(rating);
    const hasHalfStar = rating % 1 !== 0;
    
    for (let i = 0; i < fullStars; i++) {
      stars.push(<FaStar key={i} className="text-xs" />);
  }
    
    if (hasHalfStar) {
      stars.push(<FaStarHalfAlt key="half" className="text-amber-400" />);
    }
    
    const emptyStars = 5 - Math.ceil(rating);
    for (let i = 0; i < emptyStars; i++) {
      stars.push(<FaStar key={`empty-${i}`} className="text-slate-300" />);
    }
    
    return stars;
  };

  /**
   * Generate initials from a name
 * @param {string} name - Full name
   * @returns {string} Initials (up to 2 characters)
   */
  const getInitials = (name) => {
    if (!name) return 'LA';
    return name
      .split(' ')
      .map(part => part[0])
      .join('')
      .toUpperCase()
      .slice(0, 2);
  };

  /**
   * Render different views based on the current state
   */
  const renderView = () => {
    if (view === 'lawyers') {
      return (
        <>
          {/* Quick Action Buttons */}
          <div className="flex gap-4 mb-6 overflow-x-auto pb-2">
            <button
              onClick={fetchNearbyLawyers}
              disabled={nearbyLoading || loading}
              className={`relative flex items-center gap-3 px-4 py-3 rounded-xl shadow-md border transition-all duration-200 min-w-max ${
                isDarkMode 
                  ? 'bg-slate-800 border-slate-700 hover:bg-slate-700' 
                  : 'bg-white border-slate-200 hover:bg-slate-50'
              } ${(nearbyLoading || loading) ? 'opacity-80 cursor-not-allowed' : ''}`}
            >
              {(nearbyLoading || loading) ? (
                <div className="w-10 h-10 flex items-center justify-center">
                  <Lottie
                    loop
                    animationData={locationSearchAnimation}
                    play
                    style={{ width: 40, height: 40 }}
                  />
                </div>
              ) : (
                <div className="w-10 h-10 rounded-full bg-gradient-to-br from-sky-500 to-sky-600 flex items-center justify-center shadow-md">
                  <MdLocationOn className="text-white text-xl" />
                </div>
              )}
            <div className="text-left">
                <h3 className={`font-semibold ${isDarkMode ? 'text-white' : 'text-slate-800'}`}>
                  {(nearbyLoading || loading) ? 'Finding Nearby...' : 'Nearby Lawyers'}
                </h3>
                <p className={`text-xs ${isDarkMode ? 'text-slate-400' : 'text-slate-500'}`}>
                  {(nearbyLoading || loading) ? 'Please wait...' : 'Find lawyers in your area'}
                </p>
              </div>
            </button>
            
            <button 
              onClick={fetchTopRatedLawyers}
              disabled={topRatedLoading}
              className={`relative flex items-center gap-3 px-4 py-3 rounded-xl shadow-md border transition-all duration-200 min-w-max ${
                isDarkMode 
                  ? 'bg-slate-800 border-slate-700 hover:bg-slate-700' 
                  : 'bg-white border-slate-200 hover:bg-slate-50'
              }`}
            >
              {topRatedLoading ? (
                <div className="w-10 h-10 flex items-center justify-center">
                  <Lottie
                    loop
                    animationData={lawyerSearchAnimation}
                    play
                    style={{ width: 40, height: 40 }}
                  />
                </div>
              ) : (
                <div className="w-10 h-10 rounded-full bg-gradient-to-br from-amber-500 to-amber-600 flex items-center justify-center shadow-md">
                  <FaStar className="text-white text-xl" />
                </div>
              )}
              <div className="text-left">
                <h3 className={`font-semibold ${isDarkMode ? 'text-white' : 'text-slate-800'}`}>
                  Top Rated
                </h3>
                <p className={`text-xs ${isDarkMode ? 'text-slate-400' : 'text-slate-500'}`}>
                  Best reviewed lawyers
                </p>
              </div>
            </button>
            
            <button 
              onClick={() => {
                // Skip if already loading
                if (loading) {
                  console.log('Skipping reset filters because already loading');
                  return;
                }
                
                console.log('Resetting all filters from All Lawyers button');
                
                // Show loading state immediately
                setInitialLoading(true);
                setLoading(true);
                
                // Clear current results to prevent showing old data
                setLawyers([]);
                
                // Reset all filters
                setSelectedCategory('All');
                setSearchQuery('');
                setLocationEnabled(false);
                
                // Reset current page
                setCurrentPage(1);
                
                // Use setTimeout to ensure state is updated before fetch
                setTimeout(() => {
                  fetchLawyers(false);
                }, 300);
              }}
              disabled={loading}
              className={`relative flex items-center gap-3 px-4 py-3 rounded-xl shadow-md border transition-all duration-200 min-w-max ${
                isDarkMode 
                  ? 'bg-slate-800 border-slate-700 hover:bg-slate-700' 
                  : 'bg-white border-slate-200 hover:bg-slate-50'
              } ${loading ? 'opacity-80 cursor-not-allowed' : ''}`}
            >
              {loading ? (
                <div className="w-10 h-10 flex items-center justify-center">
                  <Lottie
                    loop
                    animationData={lawyerSearchAnimation}
                    play
                    style={{ width: 40, height: 40 }}
                  />
                </div>
              ) : (
                <div className="w-10 h-10 rounded-full bg-gradient-to-br from-emerald-500 to-emerald-600 flex items-center justify-center shadow-md">
                  <FaUsers className="text-white text-xl" />
                </div>
              )}
              <div className="text-left">
                <h3 className={`font-semibold ${isDarkMode ? 'text-white' : 'text-slate-800'}`}>
                  {loading ? 'Loading...' : 'All Lawyers'}
                </h3>
                <p className={`text-xs ${isDarkMode ? 'text-slate-400' : 'text-slate-500'}`}>
                  {loading ? 'Please wait...' : 'Browse all legal experts'}
                </p>
              </div>
            </button>
          </div>
          
          {/* Enhanced Filter Bar */}
          <div
            className={`rounded-2xl border p-5 mb-6 transition-all duration-300 backdrop-blur-sm shadow-lg ${
              isDarkMode 
                ? `bg-slate-800/95 border-slate-700 ${isFilterSticky ? 'sticky z-30 shadow-2xl border-sky-700 rounded-t-none border-t-0' : ''}` 
                : `bg-white border-slate-200 ${isFilterSticky ? 'sticky z-30 shadow-2xl border-sky-200 rounded-t-none border-t-0' : ''}`
            }`}
            style={{ top: isFilterSticky ? '60px' : '0' }}
          >
            {/* Header with Search in Right Corner */}
            <div className="flex flex-col md:flex-row items-start md:items-center justify-between gap-4 mb-4">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 rounded-full bg-gradient-to-br from-sky-500 to-sky-600 flex items-center justify-center shadow-md">
                  <FaSearch className="text-white" />
                </div>
                <div>
                  <h2 className={`text-xl font-bold ${isDarkMode ? 'text-white' : 'text-slate-800'}`}>
                    Find Your Lawyer
                  </h2>
                  <p className={`text-xs ${isDarkMode ? 'text-slate-400' : 'text-slate-500'}`}>
                    Search, filter, and connect with legal experts
                  </p>
                </div>
              </div>
              
              {/* Search Input in Right Corner */}
              <div className="relative w-full md:w-72 lg:w-96">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <FaSearch className={`${isDarkMode ? 'text-slate-500' : 'text-slate-400'} text-sm`} />
                </div>
                <input
                  type="text"
                  placeholder="Search by name, expertise or experience..."
                  value={searchQuery}
                  onChange={handleSearchChange}
                  className={`w-full pl-9 pr-9 py-2.5 border rounded-lg focus:outline-none focus:ring-2 focus:ring-sky-500 focus:border-transparent shadow-sm transition-all duration-200 text-sm ${
                    isDarkMode 
                      ? 'border-slate-600 bg-slate-700 text-slate-200 placeholder-slate-500' 
                      : 'border-slate-300 bg-white text-slate-700 placeholder-slate-400'
                  }`}
                />
                {searchQuery && (
                  <button 
                    type="button"
                    onClick={() => {
                      console.log('Search cleared via button');
                      
                      // Show loading state immediately
                      setInitialLoading(true);
                      setLoading(true);
                      
                      // Clear current results to prevent showing old data
                      setLawyers([]);
                      
                      // Clear the search query
                      setSearchQuery('');
                      
                      // Reset current page
                      setCurrentPage(1);
                      
                      // Use setTimeout to ensure state is updated before fetch
                      setTimeout(() => {
                        fetchLawyers(false);
                      }, 300);
                    }}
                    className="absolute right-2 top-1/2 transform -translate-y-1/2 p-1.5 text-slate-400 hover:text-slate-600 rounded-full transition-colors"
                  >
                    <FaTimes className="text-sm" />
                  </button>
                )}
              </div>
              
              <div className="md:hidden">
                <button
                  onClick={() => setShowFilters(!showFilters)}
                  className="px-4 py-2 rounded-xl text-white flex items-center gap-2 bg-gradient-to-r from-sky-500 to-sky-600 hover:from-sky-600 hover:to-sky-700 transition-all duration-200 shadow-lg"
                >
                  {showFilters ? <FaTimes /> : <FaFilter />}
                  {showFilters ? 'Close' : 'Filters'}
                </button>
              </div>
            </div>

            {/* Filter Buttons Row */}
            <div
              className={`flex flex-wrap md:flex-row items-center gap-3 w-full transition-all duration-300 ${
                showFilters
                  ? 'max-h-96 opacity-100'
                  : 'max-h-0 md:max-h-96 overflow-hidden md:overflow-visible opacity-0 md:opacity-100'
              }`}
            >
              {/* Location Toggle */}
              <button
                type="button"
                onClick={toggleLocationSearch}
                className={`px-4 py-2 border rounded-lg shadow-sm transition-all duration-200 flex items-center justify-center gap-2 text-sm ${
                  locationEnabled
                    ? 'bg-gradient-to-r from-sky-500 to-sky-600 text-white border-transparent'
                    : isDarkMode 
                      ? 'bg-slate-700/70 text-slate-300 border-slate-600 hover:bg-slate-700' 
                      : 'bg-slate-50 text-slate-600 border-slate-200 hover:bg-white'
                }`}
              >
                {locationSearching ? (
                  <>
                    <div className="animate-spin">
                      <FaRegClock className="text-sm" />
                    </div>
                    <span className="font-medium">Getting location...</span>
                  </>
                ) : (
                  <>
                    <div className="relative">
                      {locationEnabled ? (
                        <>
                          <MdMyLocation className="text-base" />
                          <span className="absolute -top-1 -right-1 w-2 h-2 bg-green-500 rounded-full"></span>
                        </>
                      ) : (
                        <MdLocationSearching className="text-base" />
                      )}
                    </div>
                    <span className="font-medium">{locationEnabled ? 'Location Active' : 'Use My Location'}</span>
                  </>
                )}
              </button>
              
              {locationError && (
                <p className="text-red-500 text-xs mt-1 px-2">{locationError}</p>
              )}

              {/* Category Filter Pills */}
              <div className="flex flex-wrap gap-2 mt-2">
                {categories.map((cat) => {
                  // Get icon based on category
                  let icon;
                  switch(cat) {
                    case 'All':
                      icon = <FaBriefcase className="text-xs" />;
                      break;
                    case 'Family':
                      icon = <FaUsers className="text-xs" />;
                      break;
                    case 'Criminal':
                      icon = <FaGavel className="text-xs" />;
                      break;
                    case 'Corporate':
                      icon = <FaBuilding className="text-xs" />;
                      break;
                    case 'Immigration':
                      icon = <FaPassport className="text-xs" />;
                      break;
                    case 'Civil':
                      icon = <FaHome className="text-xs" />;
                      break;
                    case 'Labor Law':
                      icon = <FaFileInvoiceDollar className="text-xs" />;
                      break;
                    case 'Tax Law':
                      icon = <FaFileInvoiceDollar className="text-xs" />;
                      break;
                    case 'Intellectual Property':
                      icon = <FaCopyright className="text-xs" />;
                      break;
                    default:
                      icon = <FaBriefcase className="text-xs" />;
                  }
                  
                  return (
                    <button
                      key={cat}
                      onClick={() => {
                        // Only fetch if the category is different from current selection and not already loading
                        if (selectedCategory !== cat && !loading) {
                          console.log(`Category selected: ${cat}`);
                          
                          // Show loading state immediately
                          setInitialLoading(true);
                          setLoading(true);
                          
                          // Clear current results to prevent showing old data
                          setLawyers([]);
                          
                          // Set the category
                          setSelectedCategory(cat);
                          
                          // Reset current page
                          setCurrentPage(1);
                          
                          // Use setTimeout to ensure state is updated before fetch
                          setTimeout(() => {
                            fetchLawyers(false);
                          }, 300);
                        } else if (loading) {
                          console.log(`Skipping category selection (${cat}) because already loading`);
                        }
                      }}
                      className={`px-3 py-1.5 text-xs font-medium rounded-lg whitespace-nowrap transition-all duration-200 flex items-center gap-1.5 ${
                        selectedCategory === cat
                          ? 'text-white bg-gradient-to-r from-sky-500 to-sky-600 shadow-md'
                          : isDarkMode
                            ? 'text-slate-300 bg-slate-700/70 hover:bg-slate-700 border border-slate-600'
                            : 'text-slate-600 bg-slate-50 hover:bg-white border border-slate-200'
                      }`}
                    >
                      {icon}
                      {cat}
                    </button>
                  );
                })}
              </div>
            </div>
          </div>

          {/* Loading States */}
          {(initialLoading || loading) && (
            <div className="flex flex-col justify-center items-center py-12">
              <Lottie
                loop
                animationData={lawyerSearchAnimation}
                play
                style={{ width: 150, height: 150 }}
              />
              <p className={`mt-4 text-lg font-medium ${isDarkMode ? 'text-slate-300' : 'text-slate-600'}`}>
                {selectedCategory !== 'All' 
                  ? `Finding ${selectedCategory} lawyers for you...` 
                  : searchQuery 
                    ? `Searching for "${searchQuery.trim()}"...` 
                    : locationEnabled && userLocation
                      ? 'Finding lawyers near your location...'
                      : 'Finding the best lawyers for you...'}
              </p>
              <p className={`mt-2 text-sm ${isDarkMode ? 'text-slate-400' : 'text-slate-500'}`}>
                This may take a moment
              </p>
            </div>
          )}

          {/* Error State */}
          {error && !loading && (
            <div className={`rounded-xl p-6 mb-8 text-center ${
              isDarkMode ? 'bg-red-900/20 text-red-200' : 'bg-red-50 text-red-600'
            }`}>
              <FaTimes className="mx-auto text-3xl mb-2" />
              <p>{error}</p>
              <button 
                onClick={() => {
                  // Skip if already loading
                  if (loading) {
                    console.log('Skipping try again because already loading');
                    return;
                  }
                  
                  console.log('Trying again after error');
                  
                  // Show loading state immediately
                  setInitialLoading(true);
                  setLoading(true);
                  
                  // Clear error
                  setError(null);
                  
                  // Use setTimeout to ensure state is updated before fetch
                  setTimeout(() => {
                    fetchLawyers(false);
                  }, 300);
                }}
                className="mt-4 px-4 py-2 bg-sky-600 text-white rounded-lg hover:bg-sky-700 transition-colors"
              >
                Try Again
              </button>
            </div>
          )}

          {/* Empty State - Only show when not loading and we have no results */}
          {!initialLoading && !loading && !loadingMore && !error && lawyers.length === 0 && (
            <div className={`rounded-2xl p-10 mb-8 text-center border shadow-lg ${
              isDarkMode ? 'bg-slate-800/80 text-slate-300 border-slate-700' : 'bg-white text-slate-600 border-slate-200'
            }`}>
              <div className="w-20 h-20 rounded-full bg-slate-100 flex items-center justify-center mx-auto mb-6">
                <FaUserTie className="text-4xl text-slate-400" />
              </div>
              <h3 className={`text-xl font-bold mb-3 ${isDarkMode ? 'text-white' : 'text-slate-800'}`}>No Lawyers Found</h3>
              <p className="mb-2 max-w-md mx-auto">
                {selectedCategory !== 'All' 
                  ? `We couldn't find any ${selectedCategory} lawyers` 
                  : searchQuery 
                    ? `No results found for "${searchQuery.trim()}"` 
                    : locationEnabled && userLocation
                      ? 'No lawyers found in your area'
                      : 'We couldn\'t find any lawyers matching your current search criteria.'}
              </p>
              <p className={`text-sm mb-6 ${isDarkMode ? 'text-slate-400' : 'text-slate-500'}`}>
                {selectedCategory !== 'All' || searchQuery || (locationEnabled && userLocation)
                  ? 'Try adjusting your filters or search terms.'
                  : 'Please try again or use different search criteria.'}
              </p>
              <div className="flex flex-col sm:flex-row gap-3 justify-center">
                <button 
                  onClick={() => {
                    console.log('Resetting all filters from empty state');
                    
                    // Show loading state immediately
                    setInitialLoading(true);
                    setLoading(true);
                    
                    // Clear current results to prevent showing old data
                    setLawyers([]);
                    
                    // Reset all filters
                    setSelectedCategory('All');
                    setSearchQuery('');
                    setLocationEnabled(false);
                    
                    // Reset current page
                    setCurrentPage(1);
                    
                    // Use setTimeout to ensure state is updated before fetch
                    setTimeout(() => {
                      fetchLawyers(false);
                    }, 300);
                  }}
                  className="px-5 py-2.5 bg-gradient-to-r from-sky-500 to-sky-600 text-white rounded-xl hover:from-sky-600 hover:to-sky-700 transition-all duration-200 shadow-md flex items-center justify-center gap-2"
                >
                  <FaFilter />
                  Reset All Filters
                </button>
                <button 
                  onClick={fetchNearbyLawyers}
                  disabled={nearbyLoading || loading}
                  className={`px-5 py-2.5 rounded-xl border transition-all duration-200 shadow-md flex items-center justify-center gap-2 ${
                    isDarkMode 
                      ? 'bg-slate-700 text-slate-300 border-slate-600 hover:bg-slate-600' 
                      : 'bg-white text-slate-600 border-slate-300 hover:bg-slate-50'
                  } ${(nearbyLoading || loading) ? 'opacity-70 cursor-not-allowed' : ''}`}
                >
                  {(nearbyLoading || loading) ? (
                    <>
                      <div className="w-4 h-4 border-t-2 border-b-2 border-current rounded-full animate-spin mr-2"></div>
                      <span>Finding Nearby...</span>
                    </>
                  ) : (
                    <>
                      <MdMyLocation />
                      <span>Find Nearby Lawyers</span>
                    </>
                  )}
                </button>
              </div>
            </div>
          )}

          {/* Lawyers Grid - Only show when we have results and are not in initial loading state */}
          {!initialLoading && !error && lawyers.length > 0 && (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12">
              {lawyers.map((lawyer) => (
                <div
                  key={lawyer.id}
                  className={`group rounded-2xl shadow-md hover:shadow-2xl transition-all duration-300 overflow-hidden border transform hover:-translate-y-1 ${
                    isDarkMode 
                      ? 'bg-slate-800 border-slate-700 hover:border-sky-700' 
                      : 'bg-white border-slate-200 hover:border-sky-200'
                  }`}
                >
                  <div className="relative">
                    {/* Background Image */}
                    <div className="w-full h-48 bg-gradient-to-r from-sky-500 to-indigo-600 group-hover:scale-105 transition-transform duration-300"></div>

                    {/* Top right badges */}
                    <div className="absolute top-4 right-4 flex gap-2">
                      {lawyer.is_verified && (
                        <div className="bg-emerald-500 text-white px-2 py-1 rounded-full text-xs font-medium flex items-center gap-1 shadow-lg">
                          <FaShieldAlt className="text-xs" />
                          Verified
                        </div>
                      )}
                      <div className={`px-2 py-1 rounded-full text-xs font-medium shadow-lg backdrop-blur-sm ${
                        isDarkMode 
                          ? 'bg-slate-700 bg-opacity-90 text-slate-200' 
                          : 'bg-white bg-opacity-90 text-slate-700'
                      }`}>
                        ₹{lawyer.consultation_fee}/hr
                      </div>
                    </div>

                    {/* Bottom overlay */}
                    <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/60 to-transparent p-4 flex justify-between items-end">
                      {/* Profile image or initials */}
                      {lawyer.profile_picture_url ? (
                        <img
                          src={lawyer.profile_picture_url}
                          alt={lawyer.full_name}
                          className="w-16 h-16 rounded-full border-2 border-white shadow-md object-cover"
                        />
                      ) : (
                        <div className="w-16 h-16 rounded-full border-2 border-white shadow-md bg-gradient-to-br from-sky-500 to-indigo-600 flex items-center justify-center text-white font-bold text-xl">
                          {getInitials(lawyer.full_name)}
                        </div>
                      )}

                      {/* Rating on the right */}
                      <div className="flex items-center gap-1 text-white text-sm">
                        {renderStars(lawyer.reviews_count > 0 ? 4.5 : 0)}
                        <span className="ml-1">
                          {lawyer.reviews_count > 0 ? `(${lawyer.reviews_count})` : '(New)'}
                        </span>
                      </div>
                    </div>
                  </div>

                  <div className="p-6">
                    <div className="flex items-center justify-between mb-3">
                      <h3 className={`text-xl font-bold flex items-center gap-2 ${
                        isDarkMode ? 'text-slate-200' : 'text-slate-800'
                      }`}>
                        <FaUserTie className={isDarkMode ? 'text-sky-400' : 'text-sky-600'} />
                        {lawyer.full_name}
                      </h3>
                    </div>
                    
                    <div className="space-y-3 mb-4">
                      <div className={`flex items-center gap-2 ${
                        isDarkMode ? 'text-slate-400' : 'text-slate-600'
                      }`}>
                        <FaBriefcase className={isDarkMode ? 'text-sky-400 text-sm' : 'text-sky-500 text-sm'} />
                        <span className="text-sm">{lawyer.years_of_experience} years • {lawyer.specialization}</span>
                      </div>
                      <div className={`flex items-center gap-2 ${
                        isDarkMode ? 'text-slate-400' : 'text-slate-600'
                      }`}>
                        <FaMapMarkerAlt className={isDarkMode ? 'text-sky-400 text-sm' : 'text-sky-500 text-sm'} />
                        <span className="text-sm">{lawyer.location || lawyer.bar_association}</span>
                        
                        {/* Show distance if location is enabled and distance is available */}
                        {locationEnabled && lawyer.distance && (
                          <span className="ml-auto px-2 py-0.5 bg-sky-100 text-sky-700 text-xs rounded-full font-medium">
                            {lawyer.distance < 1 
                              ? `${(lawyer.distance * 1000).toFixed(0)}m away` 
                              : `${lawyer.distance.toFixed(1)}km away`}
                          </span>
                        )}
                      </div>
                      <div className={`flex items-center gap-2 ${
                        isDarkMode ? 'text-slate-400' : 'text-slate-600'
                      }`}>
                        <FaEnvelope className={isDarkMode ? 'text-sky-400 text-sm' : 'text-sky-500 text-sm'} />
                        <span className="text-sm">{lawyer.email}</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <span className="inline-block px-3 py-1 rounded-full bg-gradient-to-r from-sky-500 to-sky-600 text-white text-xs font-medium">
                          {lawyer.specialization}
                        </span>
                        <span className={`inline-block px-3 py-1 rounded-full text-xs font-medium flex items-center gap-1 ${
                          isDarkMode 
                            ? 'bg-slate-700 text-slate-300' 
                            : 'bg-slate-100 text-slate-600'
                        }`}>
                          <FaPhoneAlt className="text-xs" />
                          {lawyer.phone_number}
                        </span>
                      </div>
                    </div>
                    
                    <div className="flex gap-3 mt-6">
                      <button
                        onClick={() => viewLawyerDetails(lawyer)}
                        className={`flex-1 py-3 px-4 border rounded-xl transition-all duration-200 flex items-center justify-center gap-2 font-medium ${
                          isDarkMode 
                            ? 'border-sky-500 text-sky-400 hover:bg-slate-700' 
                            : 'border-sky-600 text-sky-600 hover:bg-sky-50'
                        }`}
                      >
                        <FaUserCheck />
                        View Details
                      </button>
                      <button
                        onClick={() => startBooking(lawyer)}
                        className="flex items-center justify-center gap-1 px-3 py-2 bg-sky-700 text-white text-sm rounded-lg hover:bg-sky-800 transition-all duration-200 shadow-md font-medium"
                      >
                        <FaCalendarAlt className="text-xs" />
                        Book Now
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
          
          {/* Infinite Scroll Loader */}
          {!initialLoading && !loading && !error && hasMore && (
            <div 
              ref={loadMoreRef} 
              className="flex justify-center items-center py-8 mb-4"
            >
              {loadingMore ? (
                <div className="flex flex-col items-center">
                  <div className="w-10 h-10 border-t-2 border-b-2 border-sky-500 rounded-full animate-spin"></div>
                  <p className={`mt-2 text-sm font-medium ${isDarkMode ? 'text-slate-300' : 'text-slate-600'}`}>
                    Loading more lawyers...
                  </p>
                </div>
              ) : (
                <div className="text-center">
                  <p className={`text-sm ${isDarkMode ? 'text-slate-400' : 'text-slate-500'}`}>
                    <span className="animate-pulse">⬇</span> Scroll for more lawyers <span className="animate-pulse">⬇</span>
                  </p>
                </div>
              )}
            </div>
          )}
          
          {/* End of Results */}
          {!initialLoading && !error && !hasMore && lawyers.length > 0 && (
            <div className={`text-center py-6 mb-8 ${isDarkMode ? 'text-slate-400' : 'text-slate-500'}`}>
              <p className="text-sm">You've reached the end of the results</p>
            </div>
          )}
        </>
      );
    } else if (view === 'detail' && selectedLawyer) {
      return (
        <div className={`rounded-2xl shadow-lg overflow-hidden mb-12 border transition-colors duration-300 ${
          isDarkMode 
            ? 'bg-slate-800 border-slate-700' 
            : 'bg-white border-slate-200'
        }`}>
          <div className="relative h-64 md:h-80">
            {/* Background gradient instead of image */}
            <div className="w-full h-full bg-gradient-to-r from-sky-500 to-indigo-600"></div>
            
            <button
              onClick={goBack}
              className={`absolute top-6 left-6 p-3 rounded-full shadow-lg backdrop-blur-sm transition-all duration-200 ${
                isDarkMode 
                  ? 'bg-slate-800 bg-opacity-90 hover:bg-opacity-100' 
                  : 'bg-white bg-opacity-90 hover:bg-opacity-100'
              }`}
            >
              <FaArrowLeft className={isDarkMode ? 'text-slate-300' : 'text-slate-700'} />
            </button>
            <div className="absolute inset-0 bg-gradient-to-t from-black/70 via-transparent to-transparent" />
            <div className="absolute bottom-0 left-0 right-0 p-8">
              <div className="flex items-center gap-3 mb-2">
                <h1 className="text-3xl md:text-4xl font-bold text-white">{selectedLawyer.full_name}</h1>
                {selectedLawyer.is_verified && (
                  <div className="bg-emerald-500 text-white px-3 py-1 rounded-full text-sm font-medium flex items-center gap-1">
                    <FaShieldAlt />
                    Verified
                  </div>
                )}
              </div>
              <div className="flex items-center gap-2 mb-2">
                <div className="flex items-center gap-1">
                  {renderStars(selectedLawyer.reviews_count > 0 ? 4.5 : 0)}
                </div>
                <span className="text-white text-lg font-medium">
                  {selectedLawyer.reviews_count > 0 ? `(${selectedLawyer.reviews_count})` : '(New)'}
                </span>
                <span className="text-white/80">• {selectedLawyer.appointments_count || 0} appointments</span>
              </div>
              <p className="text-white/90 text-lg">{selectedLawyer.specialization} Specialist</p>
            </div>
          </div>
          
          <div className="p-8">
            {/* Key Stats */}
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8">
              <div className={`rounded-xl p-4 text-center border transition-colors duration-300 ${
                isDarkMode 
                  ? 'bg-slate-700/50 border-sky-800' 
                  : 'bg-gradient-to-br from-sky-50 to-sky-100 border-sky-200'
              }`}>
                <FaBriefcase className={`text-2xl mx-auto mb-2 ${
                  isDarkMode ? 'text-sky-400' : 'text-sky-600'
                }`} />
                <p className={`text-sm ${
                  isDarkMode ? 'text-slate-400' : 'text-slate-600'
                }`}>Experience</p>
                <p className={`font-bold ${
                  isDarkMode ? 'text-slate-200' : 'text-slate-800'
                }`}>{selectedLawyer.years_of_experience} years</p>
              </div>
              <div className={`rounded-xl p-4 text-center border transition-colors duration-300 ${
                isDarkMode 
                  ? 'bg-slate-700/50 border-emerald-800' 
                  : 'bg-gradient-to-br from-emerald-50 to-emerald-100 border-emerald-200'
              }`}>
                <FaMoneyBillWave className={`text-2xl mx-auto mb-2 ${
                  isDarkMode ? 'text-emerald-400' : 'text-emerald-600'
                }`} />
                <p className={`text-sm ${
                  isDarkMode ? 'text-slate-400' : 'text-slate-600'
                }`}>Rate</p>
                <p className={`font-bold ${
                  isDarkMode ? 'text-slate-200' : 'text-slate-800'
                }`}>₹{selectedLawyer.consultation_fee}/hr</p>
              </div>
              <div className={`rounded-xl p-4 text-center border transition-colors duration-300 ${
                isDarkMode 
                  ? 'bg-slate-700/50 border-amber-800' 
                  : 'bg-gradient-to-br from-amber-50 to-amber-100 border-amber-200'
              }`}>
                <FaBolt className={`text-2xl mx-auto mb-2 ${
                  isDarkMode ? 'text-amber-400' : 'text-amber-600'
                }`} />
                <p className={`text-sm ${
                  isDarkMode ? 'text-slate-400' : 'text-slate-600'
                }`}>License</p>
                <p className={`font-bold ${
                  isDarkMode ? 'text-slate-200' : 'text-slate-800'
                }`}>{selectedLawyer.license_number}</p>
              </div>
              <div className={`rounded-xl p-4 text-center border transition-colors duration-300 ${
                isDarkMode 
                  ? 'bg-slate-700/50 border-purple-800' 
                  : 'bg-gradient-to-br from-purple-50 to-purple-100 border-purple-200'
              }`}>
                <FaRegClock className={`text-2xl mx-auto mb-2 ${
                  isDarkMode ? 'text-purple-400' : 'text-purple-600'
                }`} />
                <p className={`text-sm ${
                  isDarkMode ? 'text-slate-400' : 'text-slate-600'
                }`}>Appointments</p>
                <p className={`font-bold ${
                  isDarkMode ? 'text-slate-200' : 'text-slate-800'
                }`}>{selectedLawyer.appointments_count || 0}</p>
              </div>
            </div>
            
            <div className="space-y-8">
              <div>
                <h3 className={`text-2xl font-bold mb-4 flex items-center gap-2 ${
                  isDarkMode ? 'text-slate-200' : 'text-slate-800'
                }`}>
                  <FaGraduationCap className={isDarkMode ? 'text-sky-400' : 'text-sky-600'} />
                  About {selectedLawyer.full_name.split(' ')[0]}
                </h3>
                <p className={`leading-relaxed text-lg ${
                  isDarkMode ? 'text-slate-300' : 'text-slate-600'
                }`}>{selectedLawyer.bio || `${selectedLawyer.full_name} is an experienced ${selectedLawyer.specialization} lawyer with ${selectedLawyer.years_of_experience} years of practice.`}</p>
              </div>
              
              <div className="grid md:grid-cols-2 gap-8">
                <div>
                  <h3 className={`text-xl font-bold mb-4 flex items-center gap-2 ${
                    isDarkMode ? 'text-slate-200' : 'text-slate-800'
                  }`}>
                    <FaMapMarkerAlt className={isDarkMode ? 'text-sky-400' : 'text-sky-600'} />
                    Location & Contact
                  </h3>
                  <div className="space-y-3">
                    <p className={`flex items-center gap-2 ${
                      isDarkMode ? 'text-slate-300' : 'text-slate-600'
                    }`}>
                      <span className="w-2 h-2 bg-sky-500 rounded-full"></span>
                      {selectedLawyer.bar_association}
                    </p>
                    <p className={`flex items-center gap-2 ${
                      isDarkMode ? 'text-slate-300' : 'text-slate-600'
                    }`}>
                      <FaPhoneAlt className="text-sm" />
                      {selectedLawyer.phone_number}
                    </p>
                    <p className={`flex items-center gap-2 ${
                      isDarkMode ? 'text-slate-300' : 'text-slate-600'
                    }`}>
                      <FaEnvelope className="text-sm" />
                      {selectedLawyer.email}
                    </p>
                  </div>
                </div>
                
                <div>
                  <h3 className={`text-xl font-bold mb-4 flex items-center gap-2 ${
                    isDarkMode ? 'text-slate-200' : 'text-slate-800'
                  }`}>
                    <FaRegClock className={isDarkMode ? 'text-sky-400' : 'text-sky-600'} />
                    Consultation Details
                  </h3>
                  <div className="space-y-3">
                    <p className={`flex items-center gap-2 ${
                      isDarkMode ? 'text-slate-300' : 'text-slate-600'
                    }`}>
                      <span className="w-2 h-2 bg-sky-500 rounded-full"></span>
                      Consultation Fee: ₹{selectedLawyer.consultation_fee}/hr
                    </p>
                    <p className={`flex items-center gap-2 ${
                      isDarkMode ? 'text-slate-300' : 'text-slate-600'
                    }`}>
                      <span className="w-2 h-2 bg-sky-500 rounded-full"></span>
                      Specialization: {selectedLawyer.specialization}
                    </p>
                    <p className={`flex items-center gap-2 ${
                      isDarkMode ? 'text-slate-300' : 'text-slate-600'
                    }`}>
                      <span className="w-2 h-2 bg-sky-500 rounded-full"></span>
                      License Number: {selectedLawyer.license_number}
                    </p>
                  </div>
                </div>
              </div>
              
              {/* Availability Slots */}
              <div>
                <h3 className={`text-xl font-bold mb-4 flex items-center gap-2 ${
                  isDarkMode ? 'text-slate-200' : 'text-slate-800'
                }`}>
                  <FaCalendarAlt className={isDarkMode ? 'text-sky-400' : 'text-sky-600'} />
                  Available Slots
                </h3>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                  {['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'].map((day, index) => (
                    <div 
                      key={index}
                      className={`p-3 rounded-xl border text-center ${
                        isDarkMode 
                          ? 'bg-slate-700 border-slate-600 text-slate-300' 
                          : 'bg-slate-50 border-slate-200 text-slate-700'
                      }`}
                    >
                      <p className="font-medium">{day}</p>
                      <p className="text-sm">9:00 AM - 5:00 PM</p>
                    </div>
                  ))}
                </div>
              </div>
              
              {/* Book Now Button */}
              <div className="flex justify-center pt-4">
                <button
                  onClick={() => startBooking(selectedLawyer)}
                  className="px-8 py-4 bg-gradient-to-r from-sky-500 to-sky-600 hover:from-sky-600 hover:to-sky-700 text-white rounded-xl shadow-lg transition-all duration-200 flex items-center gap-2 font-medium text-lg"
                >
                  <FaCalendarCheck />
                  Book Consultation Now
                </button>
              </div>
            </div>
          </div>
        </div>
      );
    } else if (view === 'booking' && selectedLawyer) {
      return (
        <div className={`rounded-2xl mt-8 shadow-lg overflow-hidden mb-12 border transition-colors duration-300 ${
          isDarkMode 
            ? 'bg-slate-800 border-slate-700' 
            : 'bg-white border-slate-200'
        }`}>
          {/* Booking Header */}
          <div className={`p-6 border-b ${isDarkMode ? 'border-slate-700' : 'border-slate-200'}`}>
            <div className="flex items-center gap-4">
              <button
                onClick={goBack}
                className={`p-3 rounded-xl ${
                  isDarkMode 
                    ? 'bg-slate-700 text-slate-300 hover:bg-slate-600' 
                    : 'bg-slate-100 text-slate-700 hover:bg-slate-200'
                } transition-all duration-200`}
              >
                <FaArrowLeft />
              </button>
              <div>
                <h2 className={`text-2xl font-bold ${isDarkMode ? 'text-slate-200' : 'text-slate-800'}`}>
                  {bookingComplete ? 'Booking Confirmed' : `Book Consultation with ${selectedLawyer.full_name}`}
                </h2>
                <p className={isDarkMode ? 'text-slate-400' : 'text-slate-600'}>
                  {bookingComplete 
                    ? 'Your consultation has been scheduled successfully' 
                    : bookingStep === 1 
                      ? 'Step 1: Select Date & Time' 
                      : 'Step 2: Enter Your Details'}
                </p>
              </div>
            </div>
          </div>
          
          {/* Booking Content */}
          <div className="p-6">
            {bookingComplete ? (
              <div className="text-center py-8">
                <div className={`w-20 h-20 rounded-full mx-auto flex items-center justify-center mb-6 ${
                  isDarkMode ? 'bg-green-900/30 text-green-400' : 'bg-green-100 text-green-600'
                }`}>
                  <FaCheckCircle className="text-4xl" />
                </div>
                <h3 className={`text-2xl font-bold mb-2 ${isDarkMode ? 'text-slate-200' : 'text-slate-800'}`}>
                  Booking Confirmed!
                </h3>
                <p className={`mb-6 ${isDarkMode ? 'text-slate-400' : 'text-slate-600'}`}>
                  Your consultation with {selectedLawyer.full_name} has been scheduled for:
                </p>
                <div className={`inline-block rounded-xl p-6 mb-8 ${
                  isDarkMode ? 'bg-slate-700' : 'bg-slate-100'
                }`}>
                  <p className={`text-xl font-bold ${isDarkMode ? 'text-slate-200' : 'text-slate-800'}`}>
                    {bookingDate ? new Date(bookingDate).toLocaleDateString('en-US', { 
                      weekday: 'long', 
                      year: 'numeric', 
                      month: 'long', 
                      day: 'numeric' 
                    }) : 'Date not selected'}
                  </p>
                  <p className={`text-lg ${isDarkMode ? 'text-slate-300' : 'text-slate-700'}`}>
                    {bookingTime || 'Time not selected'}
                  </p>
                </div>
                <p className={`mb-8 ${isDarkMode ? 'text-slate-400' : 'text-slate-600'}`}>
                  You will receive a confirmation email with all the details shortly.
                </p>
                <div className="flex justify-center gap-4">
                  <button
                    onClick={() => {
                      setView('lawyers');
                      setBookingComplete(false);
                      setBookingStep(1);
                    }}
                    className={`px-6 py-3 rounded-xl font-medium ${
                      isDarkMode 
                        ? 'bg-slate-700 text-slate-300 hover:bg-slate-600' 
                        : 'bg-slate-100 text-slate-700 hover:bg-slate-200'
                    } transition-all duration-200`}
                  >
                    Back to Lawyers
                  </button>
                  <button
                    onClick={() => {
                      // Here you would implement calendar integration
                      alert('Calendar integration would be implemented here');
                    }}
                    className="px-6 py-3 bg-gradient-to-r from-sky-500 to-sky-600 hover:from-sky-600 hover:to-sky-700 text-white rounded-xl shadow-lg transition-all duration-200 font-medium"
                  >
                    Add to Calendar
                  </button>
                </div>
              </div>
            ) : bookingStep === 1 ? (
              <form onSubmit={handleBookingSubmit} className="space-y-8">
                {/* Date Selection */}
                <div>
                  <h3 className={`text-xl font-bold mb-4 ${isDarkMode ? 'text-slate-200' : 'text-slate-800'}`}>
                    Select Date
                  </h3>
                  <div className="grid grid-cols-3 md:grid-cols-7 gap-3">
                    {nextSevenDays.map((day) => (
                      <button
                        key={day.fullDate}
                        type="button"
                        onClick={() => setBookingDate(day.fullDate)}
                        className={`p-4 rounded-xl border transition-all duration-200 ${
                          bookingDate === day.fullDate
                            ? 'bg-gradient-to-r from-sky-500 to-sky-600 text-white border-transparent shadow-lg transform scale-105'
                            : isDarkMode
                              ? 'bg-slate-700 border-slate-600 text-slate-300 hover:bg-slate-600'
                              : 'bg-white border-slate-200 text-slate-700 hover:bg-slate-50'
                        }`}
                      >
                        <p className="text-center font-medium">{day.dayName}</p>
                        <p className="text-center text-2xl font-bold my-1">{day.dayNumber}</p>
                        <p className="text-center text-sm">{day.month}</p>
                      </button>
                    ))}
                  </div>
                </div>
                
                {/* Time Selection */}
                <div>
                  <h3 className={`text-xl font-bold mb-4 ${isDarkMode ? 'text-slate-200' : 'text-slate-800'}`}>
                    Select Time
                  </h3>
                  <div className="grid grid-cols-3 md:grid-cols-5 gap-3">
                    {timeSlots.map((time) => (
                      <button
                        key={time}
                        type="button"
                        onClick={() => setBookingTime(time)}
                        className={`py-3 px-4 rounded-xl border transition-all duration-200 ${
                          bookingTime === time
                            ? 'bg-gradient-to-r from-sky-500 to-sky-600 text-white border-transparent shadow-lg transform scale-105'
                            : isDarkMode
                              ? 'bg-slate-700 border-slate-600 text-slate-300 hover:bg-slate-600'
                              : 'bg-white border-slate-200 text-slate-700 hover:bg-slate-50'
                        }`}
                      >
                        <p className="text-center font-medium">{time}</p>
                      </button>
                    ))}
                  </div>
                </div>
                
                {/* Continue Button */}
                <div className="flex justify-end">
                  <button
                    type="submit"
                    disabled={!bookingDate || !bookingTime}
                    className={`px-6 py-3 rounded-xl font-medium flex items-center gap-2 ${
                      !bookingDate || !bookingTime
                        ? 'bg-slate-400 text-white cursor-not-allowed'
                        : 'bg-gradient-to-r from-sky-500 to-sky-600 hover:from-sky-600 hover:to-sky-700 text-white shadow-lg'
                    } transition-all duration-200`}
                  >
                    Continue
                    <FaLongArrowAltRight />
                  </button>
                </div>
              </form>
            ) : (
              <form onSubmit={handleBookingSubmit} className="space-y-6">
                {/* Selected Date & Time Summary */}
                <div className={`p-4 rounded-xl ${
                  isDarkMode ? 'bg-slate-700' : 'bg-slate-100'
                } mb-6`}>
                  <div className="flex items-center justify-between">
                    <div>
                      <p className={`text-sm ${isDarkMode ? 'text-slate-400' : 'text-slate-600'}`}>
                        Selected Date & Time
                      </p>
                      <p className={`font-bold ${isDarkMode ? 'text-slate-200' : 'text-slate-800'}`}>
                        {bookingDate ? new Date(bookingDate).toLocaleDateString('en-US', { 
                          weekday: 'long', 
                          month: 'short', 
                          day: 'numeric' 
                        }) : 'Date not selected'} at {bookingTime || 'Time not selected'}
                      </p>
                    </div>
                    <button
                      type="button"
                      onClick={() => setBookingStep(1)}
                      className={`text-sm ${isDarkMode ? 'text-sky-400' : 'text-sky-600'} hover:underline`}
                    >
                      Change
                    </button>
                  </div>
                </div>
                
                {/* Personal Details Form */}
                <div className="space-y-4">
                  <div>
                    <label className={`block text-sm font-medium mb-1 ${
                      isDarkMode ? 'text-slate-300' : 'text-slate-700'
                    }`}>
                      Full Name
                    </label>
                    <input
                      type="text"
                      value={bookingFormData.name}
                      onChange={(e) => setBookingFormData({...bookingFormData, name: e.target.value})}
                      required
                      className={`w-full px-4 py-3 rounded-xl border focus:ring-2 focus:ring-sky-500 focus:border-transparent transition-all duration-200 ${
                        isDarkMode 
                          ? 'bg-slate-700 border-slate-600 text-slate-200' 
                          : 'bg-white border-slate-300 text-slate-800'
                      }`}
                      placeholder="Enter your full name"
                    />
                  </div>
                  
                  <div>
                    <label className={`block text-sm font-medium mb-1 ${
                      isDarkMode ? 'text-slate-300' : 'text-slate-700'
                    }`}>
                      Email Address
                    </label>
                    <input
                      type="email"
                      value={bookingFormData.email}
                      onChange={(e) => setBookingFormData({...bookingFormData, email: e.target.value})}
                      required
                      className={`w-full px-4 py-3 rounded-xl border focus:ring-2 focus:ring-sky-500 focus:border-transparent transition-all duration-200 ${
                        isDarkMode 
                          ? 'bg-slate-700 border-slate-600 text-slate-200' 
                          : 'bg-white border-slate-300 text-slate-800'
                      }`}
                      placeholder="Enter your email address"
                    />
                  </div>
                  
                  <div>
                    <label className={`block text-sm font-medium mb-1 ${
                      isDarkMode ? 'text-slate-300' : 'text-slate-700'
                    }`}>
                      Phone Number
                    </label>
                    <input
                      type="tel"
                      value={bookingFormData.phone}
                      onChange={(e) => setBookingFormData({...bookingFormData, phone: e.target.value})}
                      required
                      className={`w-full px-4 py-3 rounded-xl border focus:ring-2 focus:ring-sky-500 focus:border-transparent transition-all duration-200 ${
                        isDarkMode 
                          ? 'bg-slate-700 border-slate-600 text-slate-200' 
                          : 'bg-white border-slate-300 text-slate-800'
                      }`}
                      placeholder="Enter your phone number"
                    />
                  </div>
                  
                  <div>
                    <label className={`block text-sm font-medium mb-1 ${
                      isDarkMode ? 'text-slate-300' : 'text-slate-700'
                    }`}>
                      Case Details
                    </label>
                    <textarea
                      value={bookingFormData.caseDetails}
                      onChange={(e) => setBookingFormData({...bookingFormData, caseDetails: e.target.value})}
                      required
                      rows={4}
                      className={`w-full px-4 py-3 rounded-xl border focus:ring-2 focus:ring-sky-500 focus:border-transparent transition-all duration-200 ${
                        isDarkMode 
                          ? 'bg-slate-700 border-slate-600 text-slate-200' 
                          : 'bg-white border-slate-300 text-slate-800'
                      }`}
                      placeholder="Briefly describe your case or legal issue"
                    ></textarea>
                  </div>
                </div>
                
                {/* Confirm Booking Button */}
                <div className="flex justify-end pt-4">
                  <button
                    type="submit"
                    className="px-6 py-3 bg-gradient-to-r from-sky-500 to-sky-600 hover:from-sky-600 hover:to-sky-700 text-white rounded-xl shadow-lg transition-all duration-200 font-medium flex items-center gap-2"
                  >
                    Confirm Booking
                    <FaCalendarCheck />
                  </button>
                </div>
              </form>
            )}
          </div>
        </div>
      );
    }
    
    return null;
  };

  return (
    <div className={`min-h-screen ${isDarkMode ? 'bg-slate-900' : 'bg-slate-50'} mt-8 transition-colors duration-300`}>
      <div className="container mx-auto px-4 py-8" ref={contentRef}>
        <div className="mb-8">
          {/* <h1 className={`text-3xl md:text-4xl font-bold mb-2 ${isDarkMode ? 'text-white' : 'text-slate-900'}`}>
            Find Your Legal Expert
          </h1>
          <p className={`text-lg ${isDarkMode ? 'text-slate-300' : 'text-slate-600'}`}>
            Connect with experienced lawyers specialized in various legal domains
          </p> */}
        </div>
        
        {renderView()}
      </div>
    </div>
  );
};

export default LegalCosultation;