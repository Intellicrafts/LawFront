import React, { useState, useEffect, useRef, useCallback } from 'react';
import { 
  Calendar, 
  Clock, 
  User, 
  Phone, 
  Mail, 
  MapPin,
  Filter,
  Search,
  ChevronDown,
  MoreHorizontal,
  Eye,
  MessageSquare,
  CheckCircle,
  XCircle,
  AlertCircle,
  RefreshCw,
  ArrowUp,
  ArrowDown,
  Sparkles,
  Shield,
  Video,
  FileText,
  Star,
  Calendar as CalendarIcon,
  Timer,
  Users,
  TrendingUp,
  DollarSign,
  X,
  FilterX,
  Activity,
  Play,
  Zap,
  Bell,
  Maximize2,
  ExternalLink
} from 'lucide-react';
import Avatar from '../common/Avatar';

// Sample appointment data with realistic today's appointments
const generateSampleAppointments = () => {
  const now = new Date();
  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
  
  // Create appointments for different times relative to now
  const currentTime = new Date(today);
  currentTime.setHours(now.getHours() - 1); // Currently running
  
  const soonTime = new Date(today);
  soonTime.setHours(now.getHours(), now.getMinutes() + 30); // Starting soon
  
  const todayLater = new Date(today);
  todayLater.setHours(now.getHours() + 2); // Later today
  
  const tomorrow = new Date(today);
  tomorrow.setDate(tomorrow.getDate() + 1);
  tomorrow.setHours(10, 0);
  
  return [
    {
      id: 1,
      user_id: "24",
      lawyer_id: "07f53abd-83fc-4fc0-9c7a-d39a7856239a",
      appointment_time: currentTime.toISOString(),
      duration_minutes: 60,
      status: "scheduled",
      created_at: "2025-01-10T18:25:50.000000Z",
      updated_at: "2025-01-10T18:25:50.000000Z",
      user: {
        id: 24,
        name: "Devesh Yadav",
        email: "devesh.yadav@example.com",
        phone: "+91 9876543210"
      },
      lawyer: {
        id: "07f53abd-83fc-4fc0-9c7a-d39a7856239a",
        full_name: "Aditya Gupta"
      },
      consultation_fee: 3000,
      case_type: "Corporate Law",
      priority: "high",
      meeting_type: "video",
      notes: "Initial consultation for startup legal compliance - currently in progress"
    },
    {
      id: 2,
      user_id: "25",
      lawyer_id: "07f53abd-83fc-4fc0-9c7a-d39a7856239a",
      appointment_time: soonTime.toISOString(),
      duration_minutes: 45,
      status: "scheduled",
      created_at: "2025-01-08T10:15:30.000000Z",
      updated_at: "2025-01-15T15:00:00.000000Z",
      user: {
        id: 25,
        name: "Priya Sharma",
        email: "priya.sharma@example.com",
        phone: "+91 9876543211"
      },
      lawyer: {
        id: "07f53abd-83fc-4fc0-9c7a-d39a7856239a",
        full_name: "Aditya Gupta"
      },
      consultation_fee: 2500,
      case_type: "Family Law",
      priority: "medium",
      meeting_type: "video",
      notes: "Divorce proceedings consultation - starting soon"
    },
    {
      id: 3,
      user_id: "26",
      lawyer_id: "07f53abd-83fc-4fc0-9c7a-d39a7856239a",
      appointment_time: todayLater.toISOString(),
      duration_minutes: 30,
      status: "scheduled",
      created_at: "2025-01-12T16:45:20.000000Z",
      updated_at: "2025-01-14T09:30:00.000000Z",
      user: {
        id: 26,
        name: "Rahul Verma",
        email: "rahul.verma@example.com",
        phone: "+91 9876543212"
      },
      lawyer: {
        id: "07f53abd-83fc-4fc0-9c7a-d39a7856239a",
        full_name: "Aditya Gupta"
      },
      consultation_fee: 2000,
      case_type: "Criminal Law",
      priority: "urgent",
      meeting_type: "video",
      notes: "Criminal case consultation - today's appointment"
    },
    {
      id: 4,
      user_id: "27",
      lawyer_id: "07f53abd-83fc-4fc0-9c7a-d39a7856239a",
      appointment_time: tomorrow.toISOString(),
      duration_minutes: 90,
      status: "scheduled",
      created_at: "2025-01-11T12:30:45.000000Z",
      updated_at: "2025-01-13T14:20:00.000000Z",
      user: {
        id: 27,
        name: "Anjali Singh",
        email: "anjali.singh@example.com",
        phone: "+91 9876543213"
      },
      lawyer: {
        id: "07f53abd-83fc-4fc0-9c7a-d39a7856239a",
        full_name: "Aditya Gupta"
      },
      consultation_fee: 4000,
      case_type: "Civil Law",
      priority: "high",
      meeting_type: "office",
      notes: "Property dispute consultation - tomorrow's appointment"
    },
    {
      id: 5,
      user_id: "28",
      lawyer_id: "07f53abd-83fc-4fc0-9c7a-d39a7856239a",
      appointment_time: "2025-01-20T09:30:00.000000Z",
      duration_minutes: 60,
      status: "completed",
      created_at: "2025-01-15T18:25:50.000000Z",
      updated_at: "2025-01-20T10:30:00.000000Z",
      user: {
        id: 28,
        name: "Kartik Sharma",
        email: "kartik.sharma@example.com",
        phone: "+91 9876543214"
      },
      lawyer: {
        id: "07f53abd-83fc-4fc0-9c7a-d39a7856239a",
        full_name: "Aditya Gupta"
      },
      consultation_fee: 3500,
      case_type: "Business Law",
      priority: "medium",
      meeting_type: "office",
      notes: "Business partnership agreement consultation - completed successfully"
    }
  ];
};

const sampleAppointments = generateSampleAppointments();

// Status configurations
const statusConfig = {
  scheduled: {
    color: 'blue',
    bgColor: 'bg-blue-100 dark:bg-blue-900/30',
    textColor: 'text-blue-800 dark:text-blue-300',
    borderColor: 'border-blue-200 dark:border-blue-700',
    icon: Calendar,
    label: 'Scheduled'
  },
  completed: {
    color: 'green',
    bgColor: 'bg-green-100 dark:bg-green-900/30',
    textColor: 'text-green-800 dark:text-green-300',
    borderColor: 'border-green-200 dark:border-green-700',
    icon: CheckCircle,
    label: 'Completed'
  },
  cancelled: {
    color: 'red',
    bgColor: 'bg-red-100 dark:bg-red-900/30',
    textColor: 'text-red-800 dark:text-red-300',
    borderColor: 'border-red-200 dark:border-red-700',
    icon: XCircle,
    label: 'Cancelled'
  },
  rescheduled: {
    color: 'orange',
    bgColor: 'bg-orange-100 dark:bg-orange-900/30',
    textColor: 'text-orange-800 dark:text-orange-300',
    borderColor: 'border-orange-200 dark:border-orange-700',
    icon: AlertCircle,
    label: 'Rescheduled'
  }
};

// Priority configurations
const priorityConfig = {
  urgent: {
    color: 'red',
    bgColor: 'bg-red-100 dark:bg-red-900/30',
    textColor: 'text-red-800 dark:text-red-300',
    label: 'Urgent'
  },
  high: {
    color: 'orange',
    bgColor: 'bg-orange-100 dark:bg-orange-900/30',
    textColor: 'text-orange-800 dark:text-orange-300',
    label: 'High'
  },
  medium: {
    color: 'yellow',
    bgColor: 'bg-yellow-100 dark:bg-yellow-900/30',
    textColor: 'text-yellow-800 dark:text-yellow-300',
    label: 'Medium'
  },
  low: {
    color: 'gray',
    bgColor: 'bg-gray-100 dark:bg-gray-900/30',
    textColor: 'text-gray-800 dark:text-gray-300',
    label: 'Low'
  }
};

const LawyerAppointments = ({ darkMode = false, userData = {} }) => {
  // State management
  const [appointments, setAppointments] = useState([]);
  const [filteredAppointments, setFilteredAppointments] = useState([]);
  const [loading, setLoading] = useState(true);
  const [loadingMore, setLoadingMore] = useState(false);
  const [hasMore, setHasMore] = useState(true);
  const [currentPage, setCurrentPage] = useState(1);
  
  // Filter states
  const [searchQuery, setSearchQuery] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  const [priorityFilter, setPriorityFilter] = useState('all');
  const [dateFilter, setDateFilter] = useState('all');
  const [sortBy, setSortBy] = useState('appointment_time');
  const [sortOrder, setSortOrder] = useState('desc');
  const [showFilters, setShowFilters] = useState(false);
  
  // New UI state
  const [selectedAppointment, setSelectedAppointment] = useState(null);
  const [showDetailModal, setShowDetailModal] = useState(false);
  const [showTrackDropdown, setShowTrackDropdown] = useState(false);
  const [currentTime, setCurrentTime] = useState(new Date());
  
  // Refs
  const loadMoreRef = useRef(null);
  const trackDropdownRef = useRef(null);

  // Initialize appointments
  useEffect(() => {
    const initializeAppointments = () => {
      setLoading(true);
      // Simulate API call delay
      setTimeout(() => {
        setAppointments(sampleAppointments);
        setFilteredAppointments(sampleAppointments);
        setLoading(false);
      }, 1000);
    };

    initializeAppointments();
  }, []);

  // Filter and search functionality
  const applyFilters = useCallback(() => {
    let filtered = [...appointments];

    // Search filter
    if (searchQuery) {
      filtered = filtered.filter(appointment =>
        appointment.user.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        appointment.case_type.toLowerCase().includes(searchQuery.toLowerCase()) ||
        appointment.notes.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }

    // Status filter
    if (statusFilter !== 'all') {
      filtered = filtered.filter(appointment => appointment.status === statusFilter);
    }

    // Priority filter
    if (priorityFilter !== 'all') {
      filtered = filtered.filter(appointment => appointment.priority === priorityFilter);
    }

    // Date filter
    const now = new Date();
    if (dateFilter !== 'all') {
      filtered = filtered.filter(appointment => {
        const appointmentDate = new Date(appointment.appointment_time);
        switch (dateFilter) {
          case 'today':
            return appointmentDate.toDateString() === now.toDateString();
          case 'tomorrow':
            const tomorrow = new Date(now);
            tomorrow.setDate(tomorrow.getDate() + 1);
            return appointmentDate.toDateString() === tomorrow.toDateString();
          case 'this_week':
            const weekStart = new Date(now);
            weekStart.setDate(now.getDate() - now.getDay());
            const weekEnd = new Date(weekStart);
            weekEnd.setDate(weekStart.getDate() + 6);
            return appointmentDate >= weekStart && appointmentDate <= weekEnd;
          case 'this_month':
            return appointmentDate.getMonth() === now.getMonth() && 
                   appointmentDate.getFullYear() === now.getFullYear();
          default:
            return true;
        }
      });
    }

    // Sort appointments
    filtered.sort((a, b) => {
      let aValue, bValue;
      switch (sortBy) {
        case 'appointment_time':
          aValue = new Date(a.appointment_time);
          bValue = new Date(b.appointment_time);
          break;
        case 'created_at':
          aValue = new Date(a.created_at);
          bValue = new Date(b.created_at);
          break;
        case 'client_name':
          aValue = a.user.name.toLowerCase();
          bValue = b.user.name.toLowerCase();
          break;
        case 'consultation_fee':
          aValue = a.consultation_fee;
          bValue = b.consultation_fee;
          break;
        default:
          aValue = a[sortBy];
          bValue = b[sortBy];
      }

      if (sortOrder === 'asc') {
        return aValue < bValue ? -1 : aValue > bValue ? 1 : 0;
      } else {
        return aValue > bValue ? -1 : aValue < bValue ? 1 : 0;
      }
    });

    setFilteredAppointments(filtered);
  }, [appointments, searchQuery, statusFilter, priorityFilter, dateFilter, sortBy, sortOrder]);

  // Apply filters when dependencies change
  useEffect(() => {
    applyFilters();
  }, [applyFilters]);

  // Infinite scroll observer
  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        const [entry] = entries;
        if (entry.isIntersecting && hasMore && !loading && !loadingMore) {
          // Simulate loading more appointments
          setLoadingMore(true);
          setTimeout(() => {
            setLoadingMore(false);
            // In real implementation, load more data here
          }, 1500);
        }
      },
      { threshold: 0.1 }
    );

    const currentLoadMoreRef = loadMoreRef.current;
    if (currentLoadMoreRef) {
      observer.observe(currentLoadMoreRef);
    }

    return () => {
      if (currentLoadMoreRef) {
        observer.unobserve(currentLoadMoreRef);
      }
    };
  }, [hasMore, loading, loadingMore]);

  // Format date
  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      weekday: 'short',
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  };

  // Format time
  const formatTime = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleTimeString('en-US', {
      hour: '2-digit',
      minute: '2-digit',
      hour12: true
    });
  };

  // Get meeting type icon
  const getMeetingTypeIcon = (type) => {
    switch (type) {
      case 'video':
        return <Video size={16} className="text-blue-600 dark:text-blue-400" />;
      case 'office':
        return <MapPin size={16} className="text-green-600 dark:text-green-400" />;
      case 'phone':
        return <Phone size={16} className="text-orange-600 dark:text-orange-400" />;
      default:
        return <Calendar size={16} className="text-gray-600 dark:text-gray-400" />;
    }
  };

  // Update current time every minute
  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentTime(new Date());
    }, 60000); // Update every minute

    return () => clearInterval(timer);
  }, []);

  // Check if appointment is today
  const isToday = (dateString) => {
    const appointmentDate = new Date(dateString);
    const today = new Date();
    return appointmentDate.toDateString() === today.toDateString();
  };

  // Check if appointment is starting soon (within 1 hour)
  const isStartingSoon = (dateString) => {
    const appointmentTime = new Date(dateString);
    const now = new Date();
    const timeDiff = appointmentTime.getTime() - now.getTime();
    return timeDiff > 0 && timeDiff <= 60 * 60 * 1000; // Within 1 hour
  };

  // Check if appointment is currently running
  const isCurrentlyRunning = (appointment) => {
    const appointmentTime = new Date(appointment.appointment_time);
    const endTime = new Date(appointmentTime.getTime() + appointment.duration_minutes * 60000);
    const now = new Date();
    return now >= appointmentTime && now <= endTime && appointment.status === 'scheduled';
  };

  // Check if appointment can start (within 5 minutes of start time)
  const canStartMeeting = (dateString) => {
    const appointmentTime = new Date(dateString);
    const now = new Date();
    const timeDiff = appointmentTime.getTime() - now.getTime();
    return timeDiff <= 5 * 60 * 1000 && timeDiff >= -5 * 60 * 1000; // Within 5 minutes
  };

  // Get today's appointments with status
  const getTodaysAppointments = () => {
    return appointments.filter(appointment => isToday(appointment.appointment_time));
  };

  // Clear all filters
  const clearFilters = () => {
    setSearchQuery('');
    setStatusFilter('all');
    setPriorityFilter('all');
    setDateFilter('all');
    setSortBy('appointment_time');
    setSortOrder('desc');
  };

  // Open appointment detail modal
  const openDetailModal = (appointment) => {
    setSelectedAppointment(appointment);
    setShowDetailModal(true);
    document.body.style.overflow = 'hidden'; // Prevent background scroll
  };

  // Close appointment detail modal
  const closeDetailModal = () => {
    setShowDetailModal(false);
    setSelectedAppointment(null);
    document.body.style.overflow = 'unset';
  };

  // Handle start meeting
  const handleStartMeeting = (appointment) => {
    // In real implementation, this would open the meeting platform
    console.log('Starting meeting for appointment:', appointment.id);
    alert(`Starting ${appointment.meeting_type} meeting with ${appointment.user.name}`);
  };

  // Close track dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (trackDropdownRef.current && !trackDropdownRef.current.contains(event.target)) {
        setShowTrackDropdown(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  // Statistics
  const stats = {
    total: appointments.length,
    scheduled: appointments.filter(a => a.status === 'scheduled').length,
    completed: appointments.filter(a => a.status === 'completed').length,
    revenue: appointments.filter(a => a.status === 'completed').reduce((sum, a) => sum + a.consultation_fee, 0)
  };

  if (loading) {
    return (
      <div className={`min-h-screen p-6 ${darkMode ? 'bg-gray-900 text-white' : 'bg-gray-50 text-gray-900'}`}>
        <div className="max-w-7xl mx-auto">
          {/* Header Skeleton */}
          <div className="mb-8">
            <div className={`w-64 h-8 rounded-lg mb-4 ${darkMode ? 'bg-gray-800' : 'bg-gray-200'} animate-pulse`}></div>
            <div className={`w-96 h-4 rounded-lg ${darkMode ? 'bg-gray-800' : 'bg-gray-200'} animate-pulse`}></div>
          </div>
          
          {/* Stats Skeleton */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            {[...Array(4)].map((_, index) => (
              <div key={index} className={`p-6 rounded-xl ${darkMode ? 'bg-gray-800' : 'bg-white'} animate-pulse`}>
                <div className={`w-12 h-12 rounded-xl mb-4 ${darkMode ? 'bg-gray-700' : 'bg-gray-200'}`}></div>
                <div className={`w-20 h-6 rounded mb-2 ${darkMode ? 'bg-gray-700' : 'bg-gray-200'}`}></div>
                <div className={`w-16 h-4 rounded ${darkMode ? 'bg-gray-700' : 'bg-gray-200'}`}></div>
              </div>
            ))}
          </div>
          
          {/* Appointment Cards Skeleton */}
          <div className="space-y-6">
            {[...Array(3)].map((_, index) => (
              <div key={index} className={`p-6 rounded-xl ${darkMode ? 'bg-gray-800' : 'bg-white'} animate-pulse`}>
                <div className="flex items-start justify-between mb-4">
                  <div className="flex items-center space-x-4">
                    <div className={`w-12 h-12 rounded-xl ${darkMode ? 'bg-gray-700' : 'bg-gray-200'}`}></div>
                    <div>
                      <div className={`w-32 h-5 rounded mb-2 ${darkMode ? 'bg-gray-700' : 'bg-gray-200'}`}></div>
                      <div className={`w-24 h-4 rounded ${darkMode ? 'bg-gray-700' : 'bg-gray-200'}`}></div>
                    </div>
                  </div>
                  <div className={`w-16 h-6 rounded-full ${darkMode ? 'bg-gray-700' : 'bg-gray-200'}`}></div>
                </div>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div className={`w-full h-16 rounded-lg ${darkMode ? 'bg-gray-700' : 'bg-gray-200'}`}></div>
                  <div className={`w-full h-16 rounded-lg ${darkMode ? 'bg-gray-700' : 'bg-gray-200'}`}></div>
                  <div className={`w-full h-16 rounded-lg ${darkMode ? 'bg-gray-700' : 'bg-gray-200'}`}></div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    );
  }

  // Get today's appointment counts for track appointments
  const todaysAppointments = getTodaysAppointments();
  const runningAppointments = todaysAppointments.filter(appointment => isCurrentlyRunning(appointment));
  const soonAppointments = todaysAppointments.filter(appointment => isStartingSoon(appointment.appointment_time));

  return (
    <React.Fragment>
      <div className={`min-h-screen p-3 sm:p-6 ${darkMode ? 'bg-gray-900 text-white' : 'bg-gray-50 text-gray-900'} transition-colors duration-300`}>
        <div className="max-w-7xl mx-auto">
          {/* Mobile-First Header */}
          <div className="mb-6 sm:mb-8">
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mb-6">
              <div className="flex-1">
                <h1 className="text-2xl sm:text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                  My Appointments
                </h1>
              </div>
              
              {/* Action Buttons - Mobile Optimized */}
              <div className="flex items-center justify-between sm:justify-end space-x-2 sm:space-x-3">
                {/* Track Appointments Button - Most Prominent */}
                <div className="relative" ref={trackDropdownRef}>
                  <button
                    onClick={() => setShowTrackDropdown(!showTrackDropdown)}
                    className={`flex items-center space-x-2 px-3 sm:px-4 py-2 rounded-xl bg-gradient-to-r from-blue-600 to-purple-600 text-white hover:from-blue-700 hover:to-purple-700 transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-105 ${
                      (runningAppointments.length > 0 || soonAppointments.length > 0) ? 'animate-pulse' : ''
                    }`}
                    title="Track Appointments"
                  >
                    <Activity size={18} />
                    <span className="hidden sm:inline text-sm font-medium">Track</span>
                    {(runningAppointments.length > 0 || soonAppointments.length > 0) && (
                      <div className="absolute -top-1 -right-1 w-5 h-5 bg-red-500 rounded-full flex items-center justify-center">
                        <span className="text-xs font-bold text-white">
                          {runningAppointments.length + soonAppointments.length}
                        </span>
                      </div>
                    )}
                  </button>
                  
                  {/* Track Dropdown */}
                  {showTrackDropdown && (
                    <div className={`absolute right-0 top-full mt-2 w-72 sm:w-80 ${
                      darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'
                    } border rounded-xl shadow-xl z-50 backdrop-blur-lg`}>
                      <div className="p-4">
                        <h3 className="text-sm font-semibold mb-3 flex items-center space-x-2">
                          <Calendar size={16} />
                          <span>Today's Appointments</span>
                        </h3>
                        
                        {todaysAppointments.length === 0 ? (
                          <p className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'} italic`}>
                            No appointments today
                          </p>
                        ) : (
                          <div className="space-y-2">
                            {/* Running Appointments */}
                            {runningAppointments.length > 0 && (
                              <div className="space-y-2">
                                <div className="flex items-center space-x-2 text-red-600">
                                  <Activity size={14} />
                                  <span className="text-xs font-medium">Currently Running</span>
                                </div>
                                {runningAppointments.map(appointment => (
                                  <div key={appointment.id} className={`p-2 rounded-lg ${darkMode ? 'bg-red-900/20' : 'bg-red-50'} border border-red-200`}>
                                    <div className="flex items-center justify-between">
                                      <div className="flex items-center space-x-2">
                                        <Avatar name={appointment.user.name} size="sm" />
                                        <div>
                                          <p className="text-xs font-medium">{appointment.user.name}</p>
                                          <p className="text-xs text-gray-500">{formatTime(appointment.appointment_time)}</p>
                                        </div>
                                      </div>
                                      <button
                                        onClick={() => handleStartMeeting(appointment)}
                                        className="flex items-center space-x-1 px-2 py-1 bg-green-600 text-white rounded-lg text-xs font-medium hover:bg-green-700 transition-colors"
                                      >
                                        <Play size={12} />
                                        <span>Join</span>
                                      </button>
                                    </div>
                                  </div>
                                ))}
                              </div>
                            )}
                            
                            {/* Starting Soon */}
                            {soonAppointments.length > 0 && (
                              <div className="space-y-2">
                                <div className="flex items-center space-x-2 text-orange-600">
                                  <Bell size={14} />
                                  <span className="text-xs font-medium">Starting Soon</span>
                                </div>
                                {soonAppointments.map(appointment => (
                                  <div key={appointment.id} className={`p-2 rounded-lg ${darkMode ? 'bg-orange-900/20' : 'bg-orange-50'} border border-orange-200`}>
                                    <div className="flex items-center justify-between">
                                      <div className="flex items-center space-x-2">
                                        <Avatar name={appointment.user.name} size="sm" />
                                        <div>
                                          <p className="text-xs font-medium">{appointment.user.name}</p>
                                          <p className="text-xs text-gray-500">{formatTime(appointment.appointment_time)}</p>
                                        </div>
                                      </div>
                                      {canStartMeeting(appointment.appointment_time) && (
                                        <button
                                          onClick={() => handleStartMeeting(appointment)}
                                          className="flex items-center space-x-1 px-2 py-1 bg-blue-600 text-white rounded-lg text-xs font-medium hover:bg-blue-700 transition-colors"
                                        >
                                          <Play size={12} />
                                          <span>Start</span>
                                        </button>
                                      )}
                                    </div>
                                  </div>
                                ))}
                              </div>
                            )}
                            
                            {/* All Today's Appointments */}
                            {todaysAppointments.length > runningAppointments.length + soonAppointments.length && (
                              <div className="space-y-2 mt-3 pt-3 border-t border-gray-200">
                                <div className="flex items-center space-x-2 text-blue-600">
                                  <CalendarIcon size={14} />
                                  <span className="text-xs font-medium">Today's Schedule</span>
                                </div>
                                {todaysAppointments
                                  .filter(appointment => !isCurrentlyRunning(appointment) && !isStartingSoon(appointment.appointment_time))
                                  .map(appointment => (
                                    <div key={appointment.id} className={`p-2 rounded-lg ${darkMode ? 'bg-blue-900/20' : 'bg-blue-50'} border border-blue-200`}>
                                      <div className="flex items-center justify-between">
                                        <div className="flex items-center space-x-2">
                                          <Avatar name={appointment.user.name} size="sm" />
                                          <div>
                                            <p className="text-xs font-medium">{appointment.user.name}</p>
                                            <p className="text-xs text-gray-500">{formatTime(appointment.appointment_time)}</p>
                                          </div>
                                        </div>
                                        <button
                                          onClick={() => openDetailModal(appointment)}
                                          className="flex items-center space-x-1 px-2 py-1 bg-gray-600 text-white rounded-lg text-xs font-medium hover:bg-gray-700 transition-colors"
                                        >
                                          <Eye size={12} />
                                          <span>View</span>
                                        </button>
                                      </div>
                                    </div>
                                ))}
                              </div>
                            )}
                          </div>
                        )}
                      </div>
                    </div>
                  )}
                </div>
                
                {/* Refresh Button */}
                <button
                  onClick={() => applyFilters()}
                  className={`p-2 rounded-xl ${
                    darkMode 
                      ? 'bg-gray-800 hover:bg-gray-700 border border-gray-700' 
                      : 'bg-white hover:bg-gray-50 border border-gray-200'
                  } transition-all duration-200 shadow-lg hover:shadow-xl`}
                  title="Refresh"
                >
                  <RefreshCw size={18} className={darkMode ? 'text-gray-300' : 'text-gray-600'} />
                </button>
                
                {/* Filter Toggle */}
                <button
                  onClick={() => setShowFilters(!showFilters)}
                  className={`flex items-center space-x-2 px-3 sm:px-4 py-2 rounded-xl ${
                    darkMode 
                      ? 'bg-gray-800 hover:bg-gray-700 border border-gray-700' 
                      : 'bg-white hover:bg-gray-50 border border-gray-200'
                  } transition-all duration-200 shadow-lg hover:shadow-xl`}
                >
                  <Filter size={18} className={darkMode ? 'text-gray-300' : 'text-gray-600'} />
                  <span className="hidden sm:inline text-sm font-medium">Filters</span>
                </button>
              </div>
            </div>

          {/* Statistics Cards */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <div className={`p-6 rounded-xl ${
              darkMode 
                ? 'bg-gray-800/70 backdrop-blur-sm border border-gray-700/50' 
                : 'bg-white/70 backdrop-blur-sm border border-gray-200/50'
            } shadow-lg hover:shadow-xl transition-all duration-300 group`}>
              <div className="flex items-center justify-between mb-4">
                <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl flex items-center justify-center shadow-lg group-hover:shadow-xl transition-shadow duration-300">
                  <CalendarIcon size={20} className="text-white" />
                </div>
                <TrendingUp size={16} className="text-blue-500" />
              </div>
              <h3 className="text-2xl font-bold mb-1">{stats.total}</h3>
              <p className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>Total Appointments</p>
            </div>

            <div className={`p-6 rounded-xl ${
              darkMode 
                ? 'bg-gray-800/70 backdrop-blur-sm border border-gray-700/50' 
                : 'bg-white/70 backdrop-blur-sm border border-gray-200/50'
            } shadow-lg hover:shadow-xl transition-all duration-300 group`}>
              <div className="flex items-center justify-between mb-4">
                <div className="w-12 h-12 bg-gradient-to-br from-green-500 to-green-600 rounded-xl flex items-center justify-center shadow-lg group-hover:shadow-xl transition-shadow duration-300">
                  <CheckCircle size={20} className="text-white" />
                </div>
                <ArrowUp size={16} className="text-green-500" />
              </div>
              <h3 className="text-2xl font-bold mb-1">{stats.scheduled}</h3>
              <p className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>Scheduled</p>
            </div>

            <div className={`p-6 rounded-xl ${
              darkMode 
                ? 'bg-gray-800/70 backdrop-blur-sm border border-gray-700/50' 
                : 'bg-white/70 backdrop-blur-sm border border-gray-200/50'
            } shadow-lg hover:shadow-xl transition-all duration-300 group`}>
              <div className="flex items-center justify-between mb-4">
                <div className="w-12 h-12 bg-gradient-to-br from-purple-500 to-purple-600 rounded-xl flex items-center justify-center shadow-lg group-hover:shadow-xl transition-shadow duration-300">
                  <Star size={20} className="text-white" />
                </div>
                <TrendingUp size={16} className="text-purple-500" />
              </div>
              <h3 className="text-2xl font-bold mb-1">{stats.completed}</h3>
              <p className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>Completed</p>
            </div>

            <div className={`p-6 rounded-xl ${
              darkMode 
                ? 'bg-gray-800/70 backdrop-blur-sm border border-gray-700/50' 
                : 'bg-white/70 backdrop-blur-sm border border-gray-200/50'
            } shadow-lg hover:shadow-xl transition-all duration-300 group`}>
              <div className="flex items-center justify-between mb-4">
                <div className="w-12 h-12 bg-gradient-to-br from-orange-500 to-orange-600 rounded-xl flex items-center justify-center shadow-lg group-hover:shadow-xl transition-shadow duration-300">
                  <DollarSign size={20} className="text-white" />
                </div>
                <ArrowUp size={16} className="text-orange-500" />
              </div>
              <h3 className="text-2xl font-bold mb-1">₹{stats.revenue.toLocaleString()}</h3>
              <p className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>Total Revenue</p>
            </div>
          </div>

            {/* Compact Filters Section - Mobile Optimized */}
            {showFilters && (
              <div className={`p-4 sm:p-6 rounded-xl ${
                darkMode 
                  ? 'bg-gray-800/70 backdrop-blur-sm border border-gray-700/50' 
                  : 'bg-white/70 backdrop-blur-sm border border-gray-200/50'
              } shadow-lg mb-6 transition-all duration-300`}>
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-4 mb-4">
                  {/* Search */}
                  <div className="relative col-span-full sm:col-span-1 lg:col-span-2">
                    <Search size={16} className={`absolute left-3 top-1/2 transform -translate-y-1/2 ${darkMode ? 'text-gray-400' : 'text-gray-500'}`} />
                    <input
                      type="text"
                      placeholder="Search clients, cases..."
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      className={`w-full pl-9 pr-4 py-2 text-sm rounded-lg border ${
                        darkMode 
                          ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400 focus:border-blue-500' 
                          : 'bg-white border-gray-300 text-gray-900 placeholder-gray-500 focus:border-blue-500'
                      } focus:outline-none focus:ring-2 focus:ring-blue-500/20 transition-all duration-200`}
                    />
                  </div>

                  {/* Status Filter */}
                  <select
                    value={statusFilter}
                    onChange={(e) => setStatusFilter(e.target.value)}
                    className={`px-3 py-2 text-sm rounded-lg border ${
                      darkMode 
                        ? 'bg-gray-700 border-gray-600 text-white focus:border-blue-500' 
                        : 'bg-white border-gray-300 text-gray-900 focus:border-blue-500'
                    } focus:outline-none focus:ring-2 focus:ring-blue-500/20 transition-all duration-200`}
                  >
                    <option value="all">All Status</option>
                  <option value="scheduled">Scheduled</option>
                  <option value="completed">Completed</option>
                  <option value="cancelled">Cancelled</option>
                  <option value="rescheduled">Rescheduled</option>
                  </select>

                  {/* Priority Filter */}
                  <select
                    value={priorityFilter}
                    onChange={(e) => setPriorityFilter(e.target.value)}
                    className={`px-3 py-2 text-sm rounded-lg border ${
                      darkMode 
                        ? 'bg-gray-700 border-gray-600 text-white focus:border-blue-500' 
                        : 'bg-white border-gray-300 text-gray-900 focus:border-blue-500'
                    } focus:outline-none focus:ring-2 focus:ring-blue-500/20 transition-all duration-200`}
                  >
                    <option value="all">All Priority</option>
                    <option value="urgent">Urgent</option>
                    <option value="high">High</option>
                    <option value="medium">Medium</option>
                    <option value="low">Low</option>
                  </select>

                  {/* Date Filter */}
                  <select
                    value={dateFilter}
                    onChange={(e) => setDateFilter(e.target.value)}
                    className={`px-3 py-2 text-sm rounded-lg border ${
                      darkMode 
                        ? 'bg-gray-700 border-gray-600 text-white focus:border-blue-500' 
                        : 'bg-white border-gray-300 text-gray-900 focus:border-blue-500'
                    } focus:outline-none focus:ring-2 focus:ring-blue-500/20 transition-all duration-200`}
                  >
                    <option value="all">All Dates</option>
                    <option value="today">Today</option>
                    <option value="tomorrow">Tomorrow</option>
                    <option value="this_week">This Week</option>
                    <option value="this_month">This Month</option>
                  </select>
                </div>

                {/* Filter Actions */}
                <div className="flex flex-wrap items-center gap-2 sm:gap-4 mt-3 sm:mt-0">
                  {/* Sort Options - Compact */}
                  <div className="flex items-center space-x-2">
                    <span className={`text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>Sort:</span>
                    <select
                      value={sortBy}
                      onChange={(e) => setSortBy(e.target.value)}
                      className={`px-2 py-1 rounded-lg border text-sm ${
                        darkMode 
                        ? 'bg-gray-700 border-gray-600 text-white focus:border-blue-500' 
                        : 'bg-white border-gray-300 text-gray-900 focus:border-blue-500'
                    } focus:outline-none transition-all duration-200`}
                  >
                    <option value="appointment_time">Appointment Time</option>
                    <option value="created_at">Created Date</option>
                    <option value="client_name">Client Name</option>
                    <option value="consultation_fee">Fee</option>
                  </select>
                  <button
                    onClick={() => setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')}
                    className={`p-1 rounded-lg ${
                      darkMode 
                        ? 'hover:bg-gray-700 text-gray-300' 
                        : 'hover:bg-gray-100 text-gray-600'
                    } transition-colors duration-200`}
                  >
                    {sortOrder === 'asc' ? <ArrowUp size={16} /> : <ArrowDown size={16} />}
                  </button>
                </div>

                  {/* Clear Filters - Professional Button */}
                  <button
                    onClick={clearFilters}
                    className={`flex items-center space-x-1 px-3 py-1 rounded-lg text-sm font-medium ${
                      darkMode 
                        ? 'bg-red-900/20 hover:bg-red-900/30 text-red-300 border border-red-700/50' 
                        : 'bg-red-50 hover:bg-red-100 text-red-700 border border-red-200'
                    } transition-all duration-200 shadow-sm hover:shadow-md`}
                    title="Clear all filters"
                  >
                    <FilterX size={14} />
                    <span className="hidden sm:inline">Clear</span>
                  </button>
              </div>
            </div>
          )}
        </div>

        {/* Appointments List */}
        <div className="space-y-6">
          {filteredAppointments.length === 0 ? (
            <div className={`text-center py-12 rounded-xl ${
              darkMode 
                ? 'bg-gray-800/70 backdrop-blur-sm border border-gray-700/50' 
                : 'bg-white/70 backdrop-blur-sm border border-gray-200/50'
            } shadow-lg`}>
              <Calendar size={64} className={`mx-auto mb-4 ${darkMode ? 'text-gray-600' : 'text-gray-400'}`} />
              <h3 className={`text-xl font-semibold mb-2 ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                No appointments found
              </h3>
              <p className={`${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                {searchQuery || statusFilter !== 'all' || priorityFilter !== 'all' || dateFilter !== 'all' 
                  ? 'Try adjusting your filters to see more appointments.'
                  : 'You don\'t have any appointments scheduled yet.'}
              </p>
            </div>
          ) : (
            filteredAppointments.map((appointment) => {
              const status = statusConfig[appointment.status];
              const priority = priorityConfig[appointment.priority];
              const StatusIcon = status.icon;

              return (
                <div
                  key={appointment.id}
                  className={`p-6 rounded-xl ${
                    darkMode 
                      ? 'bg-gray-800/70 backdrop-blur-sm border border-gray-700/50 hover:border-gray-600/50' 
                      : 'bg-white/70 backdrop-blur-sm border border-gray-200/50 hover:border-gray-300/50'
                  } shadow-lg hover:shadow-xl transition-all duration-300 group`}
                >
                  {/* Header */}
                  <div className="flex items-start justify-between mb-6">
                    <div className="flex items-center space-x-4">
                      <div className="relative">
                        <Avatar
                          src={appointment.user.avatar}
                          name={appointment.user.name}
                          size={48}
                          className="w-12 h-12 rounded-xl shadow-md group-hover:shadow-lg transition-shadow duration-300"
                        />
                        {appointment.priority === 'urgent' && (
                          <div className="absolute -top-1 -right-1 w-4 h-4 bg-red-500 rounded-full flex items-center justify-center">
                            <Sparkles size={8} className="text-white" />
                          </div>
                        )}
                      </div>
                      <div>
                        <h3 className="text-lg font-semibold mb-1">{appointment.user.name}</h3>
                        <div className="flex items-center space-x-2">
                          <span className={`px-2 py-1 rounded-full text-xs font-medium ${status.bgColor} ${status.textColor} border ${status.borderColor}`}>
                            <StatusIcon size={12} className="inline mr-1" />
                            {status.label}
                          </span>
                          <span className={`px-2 py-1 rounded-full text-xs font-medium ${priority.bgColor} ${priority.textColor}`}>
                            {priority.label}
                          </span>
                        </div>
                      </div>
                    </div>
                    
                    <div className="flex items-center space-x-2">
                      <div className="text-right">
                        <div className="text-lg font-bold text-green-600 dark:text-green-400">
                          ₹{appointment.consultation_fee.toLocaleString()}
                        </div>
                        <div className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                          {appointment.duration_minutes} mins
                        </div>
                      </div>
                      <button className={`p-2 rounded-xl ${
                        darkMode 
                          ? 'hover:bg-gray-700 text-gray-400 hover:text-gray-300' 
                          : 'hover:bg-gray-100 text-gray-500 hover:text-gray-700'
                      } transition-all duration-200`}>
                        <MoreHorizontal size={18} />
                      </button>
                    </div>
                  </div>

                  {/* Content Grid */}
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
                    {/* Date & Time */}
                    <div className={`p-4 rounded-xl ${
                      darkMode 
                        ? 'bg-gray-700/50 border border-gray-600/50' 
                        : 'bg-gray-50/50 border border-gray-200/50'
                    } transition-all duration-200 hover:shadow-md`}>
                      <div className="flex items-center space-x-3 mb-2">
                        <Calendar size={18} className="text-blue-500" />
                        <span className={`font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                          Date & Time
                        </span>
                      </div>
                      <div>
                        <div className="font-semibold">{formatDate(appointment.appointment_time)}</div>
                        <div className={`text-sm flex items-center mt-1 ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                          <Clock size={14} className="mr-1" />
                          {formatTime(appointment.appointment_time)}
                        </div>
                      </div>
                    </div>

                    {/* Contact Info */}
                    <div className={`p-4 rounded-xl ${
                      darkMode 
                        ? 'bg-gray-700/50 border border-gray-600/50' 
                        : 'bg-gray-50/50 border border-gray-200/50'
                    } transition-all duration-200 hover:shadow-md`}>
                      <div className="flex items-center space-x-3 mb-2">
                        <User size={18} className="text-purple-500" />
                        <span className={`font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                          Contact
                        </span>
                      </div>
                      <div className="space-y-2">
                        <div className={`text-sm flex items-center ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                          <Mail size={14} className="mr-2" />
                          {appointment.user.email}
                        </div>
                        <div className={`text-sm flex items-center ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                          <Phone size={14} className="mr-2" />
                          {appointment.user.phone}
                        </div>
                      </div>
                    </div>

                    {/* Case Details */}
                    <div className={`p-4 rounded-xl ${
                      darkMode 
                        ? 'bg-gray-700/50 border border-gray-600/50' 
                        : 'bg-gray-50/50 border border-gray-200/50'
                    } transition-all duration-200 hover:shadow-md`}>
                      <div className="flex items-center space-x-3 mb-2">
                        <FileText size={18} className="text-green-500" />
                        <span className={`font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                          Case Type
                        </span>
                      </div>
                      <div>
                        <div className="font-semibold">{appointment.case_type}</div>
                        <div className={`text-sm flex items-center mt-1 ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                          {getMeetingTypeIcon(appointment.meeting_type)}
                          <span className="ml-1 capitalize">{appointment.meeting_type} Meeting</span>
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* Notes */}
                  {appointment.notes && (
                    <div className={`p-4 rounded-xl ${
                      darkMode 
                        ? 'bg-blue-900/20 border border-blue-700/30' 
                        : 'bg-blue-50/50 border border-blue-200/30'
                    } transition-all duration-200`}>
                      <div className="flex items-start space-x-3">
                        <MessageSquare size={18} className="text-blue-500 mt-0.5 flex-shrink-0" />
                        <div>
                          <span className={`font-medium block mb-1 ${darkMode ? 'text-blue-300' : 'text-blue-700'}`}>
                            Notes
                          </span>
                          <p className={`text-sm ${darkMode ? 'text-blue-200' : 'text-blue-600'}`}>
                            {appointment.notes}
                          </p>
                        </div>
                      </div>
                    </div>
                  )}

                  {/* Footer */}
                  <div className={`flex items-center justify-between mt-6 pt-4 border-t ${
                    darkMode ? 'border-gray-700/50' : 'border-gray-200/50'
                  }`}>
                    <div className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                      Created on {formatDate(appointment.created_at)}
                    </div>
                    <div className="flex items-center space-x-2">
                      <button 
                        onClick={() => openDetailModal(appointment)}
                        className={`flex items-center space-x-1 sm:space-x-2 px-2 sm:px-3 py-1.5 rounded-lg text-xs sm:text-sm font-medium ${
                          darkMode 
                            ? 'bg-blue-600/20 text-blue-400 hover:bg-blue-600/30 border border-blue-600/30' 
                            : 'bg-blue-50 text-blue-600 hover:bg-blue-100 border border-blue-200'
                        } transition-all duration-200`}>
                        <Eye size={14} />
                        <span className="hidden sm:inline">View Details</span>
                        <span className="sm:hidden">View</span>
                      </button>
                      
                      {/* Start Meeting Button - Only show if meeting can start */}
                      {isToday(appointment.appointment_time) && canStartMeeting(appointment.appointment_time) && (
                        <button 
                          onClick={() => handleStartMeeting(appointment)}
                          className={`flex items-center space-x-1 sm:space-x-2 px-2 sm:px-3 py-1.5 rounded-lg text-xs sm:text-sm font-medium bg-green-600 text-white hover:bg-green-700 border border-green-500 transition-all duration-200 animate-pulse`}>
                          <Play size={14} />
                          <span className="hidden sm:inline">Start Meeting</span>
                          <span className="sm:hidden">Start</span>
                        </button>
                      )}
                      
                      <button className={`flex items-center space-x-1 sm:space-x-2 px-2 sm:px-3 py-1.5 rounded-lg text-xs sm:text-sm font-medium ${
                        darkMode 
                          ? 'bg-gray-700 text-gray-300 hover:bg-gray-600 border border-gray-600' 
                          : 'bg-gray-100 text-gray-600 hover:bg-gray-200 border border-gray-300'
                      } transition-all duration-200`}>
                        <MessageSquare size={14} />
                        <span className="hidden sm:inline">Message</span>
                        <span className="sm:hidden">Chat</span>
                      </button>
                    </div>
                  </div>
                </div>
              );
            })
          )}
        </div>

        {/* Load More Section */}
        {filteredAppointments.length > 0 && (
          <div ref={loadMoreRef} className="flex justify-center items-center py-8">
            {loadingMore ? (
              <div className="flex flex-col items-center space-y-4">
                <div className="relative">
                  <div className="w-12 h-12 border-4 border-blue-200 dark:border-blue-900/50 rounded-full animate-spin">
                    <div className="w-12 h-12 border-t-4 border-blue-600 rounded-full animate-spin absolute top-0 left-0"></div>
                  </div>
                  <div className="absolute inset-0 flex items-center justify-center">
                    <div className="w-2 h-2 bg-blue-600 rounded-full animate-pulse"></div>
                  </div>
                </div>
                <p className={`text-sm font-medium ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                  Loading more appointments...
                </p>
              </div>
            ) : (
              hasMore && (
                <button
                  onClick={() => {
                    setLoadingMore(true);
                    setTimeout(() => setLoadingMore(false), 1500);
                  }}
                  className={`px-6 py-3 rounded-xl font-medium ${
                    darkMode 
                      ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white hover:from-blue-700 hover:to-purple-700' 
                      : 'bg-gradient-to-r from-blue-600 to-purple-600 text-white hover:from-blue-700 hover:to-purple-700'
                  } transition-all duration-200 shadow-lg hover:shadow-xl transform hover:scale-105`}
                >
                  Load More Appointments
                </button>
              )
            )}
          </div>
        )}
      </div>
      
      {/* Professional Appointment Detail Modal */}
      {showDetailModal && selectedAppointment && (
        <div className="fixed inset-0 z-50 overflow-hidden flex items-center justify-center p-4">
          {/* Backdrop */}
          <div 
            className="absolute inset-0 bg-black/50 backdrop-blur-sm transition-opacity duration-300"
            onClick={closeDetailModal}
          ></div>
          
          {/* Modal */}
          <div className={`relative w-full max-w-2xl max-h-[90vh] overflow-y-auto rounded-2xl ${
            darkMode 
              ? 'bg-gray-900 border border-gray-700' 
              : 'bg-white border border-gray-200'
          } shadow-2xl transform transition-all duration-300 scale-100`}>
            {/* Modal Header */}
            <div className={`sticky top-0 px-6 py-4 border-b ${
              darkMode ? 'border-gray-700 bg-gray-900/95' : 'border-gray-200 bg-white/95'
            } backdrop-blur-sm rounded-t-2xl`}>
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <Avatar name={selectedAppointment.user.name} size="md" />
                  <div>
                    <h2 className="text-xl font-bold">{selectedAppointment.user.name}</h2>
                    <p className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                      Appointment Details
                    </p>
                  </div>
                </div>
                <button
                  onClick={closeDetailModal}
                  className={`p-2 rounded-xl ${
                    darkMode 
                      ? 'hover:bg-gray-800 text-gray-400 hover:text-gray-300' 
                      : 'hover:bg-gray-100 text-gray-600 hover:text-gray-700'
                  } transition-all duration-200`}
                >
                  <X size={20} />
                </button>
              </div>
            </div>
            
            {/* Modal Content */}
            <div className="p-6 space-y-6">
              {/* Status and Priority */}
              <div className="flex flex-wrap items-center gap-3">
                <span className={`px-3 py-1 rounded-lg text-sm font-medium ${
                  statusConfig[selectedAppointment.status].bgColor
                } ${statusConfig[selectedAppointment.status].textColor} border ${
                  statusConfig[selectedAppointment.status].borderColor
                }`}>
                  {React.createElement(statusConfig[selectedAppointment.status].icon, { size: 14, className: "inline mr-1" })}
                  {statusConfig[selectedAppointment.status].label}
                </span>
                <span className={`px-3 py-1 rounded-lg text-sm font-medium ${
                  priorityConfig[selectedAppointment.priority].bgColor
                } ${priorityConfig[selectedAppointment.priority].textColor}`}>
                  {priorityConfig[selectedAppointment.priority].label}
                </span>
                {getMeetingTypeIcon(selectedAppointment.meeting_type)}
              </div>
              
              {/* Appointment Time */}
              <div className={`p-4 rounded-xl ${darkMode ? 'bg-gray-800/50' : 'bg-gray-50'}`}>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="flex items-center space-x-3">
                    <div className={`p-2 rounded-lg ${darkMode ? 'bg-blue-900/30' : 'bg-blue-100'}`}>
                      <Calendar size={18} className="text-blue-600" />
                    </div>
                    <div>
                      <p className="text-sm font-medium">Date</p>
                      <p className={`text-sm ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                        {formatDate(selectedAppointment.appointment_time)}
                      </p>
                    </div>
                  </div>
                  <div className="flex items-center space-x-3">
                    <div className={`p-2 rounded-lg ${darkMode ? 'bg-green-900/30' : 'bg-green-100'}`}>
                      <Clock size={18} className="text-green-600" />
                    </div>
                    <div>
                      <p className="text-sm font-medium">Time</p>
                      <p className={`text-sm ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                        {formatTime(selectedAppointment.appointment_time)} ({selectedAppointment.duration_minutes} min)
                      </p>
                    </div>
                  </div>
                </div>
              </div>
              
              {/* Client Information */}
              <div className={`p-4 rounded-xl ${darkMode ? 'bg-gray-800/50' : 'bg-gray-50'}`}>
                <h3 className="text-lg font-semibold mb-3">Client Information</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="flex items-center space-x-3">
                    <Mail size={16} className={darkMode ? 'text-gray-400' : 'text-gray-500'} />
                    <div>
                      <p className="text-sm font-medium">Email</p>
                      <p className={`text-sm ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                        {selectedAppointment.user.email}
                      </p>
                    </div>
                  </div>
                  <div className="flex items-center space-x-3">
                    <Phone size={16} className={darkMode ? 'text-gray-400' : 'text-gray-500'} />
                    <div>
                      <p className="text-sm font-medium">Phone</p>
                      <p className={`text-sm ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                        {selectedAppointment.user.phone}
                      </p>
                    </div>
                  </div>
                </div>
              </div>
              
              {/* Case Information */}
              <div className={`p-4 rounded-xl ${darkMode ? 'bg-gray-800/50' : 'bg-gray-50'}`}>
                <h3 className="text-lg font-semibold mb-3">Case Information</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                  <div>
                    <p className="text-sm font-medium mb-1">Case Type</p>
                    <p className={`text-sm ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                      {selectedAppointment.case_type}
                    </p>
                  </div>
                  <div>
                    <p className="text-sm font-medium mb-1">Consultation Fee</p>
                    <p className={`text-sm font-bold ${darkMode ? 'text-green-400' : 'text-green-600'}`}>
                      ₹{selectedAppointment.consultation_fee.toLocaleString()}
                    </p>
                  </div>
                </div>
                <div>
                  <p className="text-sm font-medium mb-2">Notes</p>
                  <p className={`text-sm ${darkMode ? 'text-gray-300' : 'text-gray-700'} leading-relaxed`}>
                    {selectedAppointment.notes}
                  </p>
                </div>
              </div>
            </div>
            
            {/* Modal Footer */}
            <div className={`sticky bottom-0 px-6 py-4 border-t ${
              darkMode ? 'border-gray-700 bg-gray-900/95' : 'border-gray-200 bg-white/95'
            } backdrop-blur-sm rounded-b-2xl`}>
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  {/* Join Meeting Button - Only active when meeting can start */}
                  {isToday(selectedAppointment.appointment_time) && canStartMeeting(selectedAppointment.appointment_time) ? (
                    <button
                      onClick={() => {
                        handleStartMeeting(selectedAppointment);
                        closeDetailModal();
                      }}
                      className="flex items-center space-x-2 px-4 py-2 bg-green-600 text-white rounded-lg font-medium hover:bg-green-700 transition-all duration-200 shadow-lg hover:shadow-xl animate-pulse"
                    >
                      <Play size={16} />
                      <span>Join Appointment</span>
                    </button>
                  ) : (
                    <div className={`flex items-center space-x-2 px-4 py-2 rounded-lg font-medium ${
                      darkMode 
                        ? 'bg-gray-800 text-gray-500 border border-gray-700' 
                        : 'bg-gray-100 text-gray-500 border border-gray-300'
                    }`}>
                      <Clock size={16} />
                      <span>Meeting not ready</span>
                    </div>
                  )}
                </div>
                
                <button
                  onClick={closeDetailModal}
                  className={`px-4 py-2 rounded-lg font-medium ${
                    darkMode 
                      ? 'bg-gray-800 text-gray-300 hover:bg-gray-700 border border-gray-700' 
                      : 'bg-gray-100 text-gray-700 hover:bg-gray-200 border border-gray-300'
                  } transition-all duration-200`}
                >
                  Close
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </React.Fragment>
  );
};

export default LawyerAppointments;