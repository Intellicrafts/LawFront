import React, { useState, useEffect, useRef, useCallback } from 'react';
import { 
  User, Mail, Phone, MapPin, Calendar, Briefcase, Globe, Camera, Edit3, Save, X, 
  Crown, Shield, Star, Award, Settings, Lock, Bell, Heart, Share2, Download, 
  AlertCircle, CheckCircle, Loader, Code, FileText, MessageSquare, Verified,
  Building, Pencil, Check, Image, Upload, ChevronDown, ChevronUp, Eye, EyeOff,
  Trash2, RefreshCw, Link, Clipboard, Github, Twitter, Linkedin, Facebook,
  Laptop
} from 'lucide-react';
import { apiServices } from '../../api/apiService';
import { useSelector } from 'react-redux';
import SecurityTab from './SecurityTab';

const UserProfile = () => {
  // Get theme from Redux store
  const { mode } = useSelector((state) => state.theme);
  const isDarkMode = mode === 'dark';
  
  // State management
  const [activeTab, setActiveTab] = useState('profile'); // profile, security, notifications, preferences
  const [isEditing, setIsEditing] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [isUploadingAvatar, setIsUploadingAvatar] = useState(false);
  const [isChangingPassword, setIsChangingPassword] = useState(false);
  const [imagePreview, setImagePreview] = useState(null);
  const [message, setMessage] = useState({ type: '', text: '' });
  const [errors, setErrors] = useState({});
  const [activeSection, setActiveSection] = useState('personal'); // For mobile accordion
  const [skillInput, setSkillInput] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [showCurrentPassword, setShowCurrentPassword] = useState(false);
  const [showNewPassword, setShowNewPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [passwordForm, setPasswordForm] = useState({
    current_password: '',
    new_password: '',
    new_password_confirmation: ''
  });
  
  // Refs
  const messageTimeoutRef = useRef(null);
  const fileInputRef = useRef(null);
  const skillInputRef = useRef(null);

  // Demo profile as fallback
  const demoProfile = {
    id: 'demo-001',
    name: 'John',
    last_name: 'Doe',
    email: 'john.doe@example.com',
    phone: '+1 (555) 123-4567',
    location: 'New Delhi, India',
    website: 'https://johndoe.dev',
    joinDate: 'January 15, 2023',
    company: 'MeraBakil Legal Solutions',
    bio: 'Legal professional with expertise in corporate law and intellectual property. Passionate about using technology to make legal services more accessible.',
    title: 'Senior Legal Consultant',
    avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face',
    account_type: 'premium',
    email_verified_at: '2023-01-15T10:30:00Z',
    stats: { projects: 24, followers: 1247, following: 189, likes: 3428 },
    skills: ['Corporate Law', 'Intellectual Property', 'Contract Drafting', 'Legal Research', 'Negotiation'],
    achievements: ['Top Legal Advisor 2023', 'Published in Legal Journal', '100+ Cases Resolved'],
    social: {
      twitter: 'https://twitter.com/johndoe',
      linkedin: 'https://linkedin.com/in/johndoe',
      github: 'https://github.com/johndoe',
      facebook: 'https://facebook.com/johndoe'
    },
    recentActivity: [
      { id: 'act1', type: 'case', description: 'Successfully resolved Case #12345', date: '2023-06-01' },
      { id: 'act2', type: 'document', description: 'Created new contract template', date: '2023-05-28' },
      { id: 'act3', type: 'consultation', description: 'Provided legal consultation to Client XYZ', date: '2023-05-15' }
    ]
  };

  const [userInfo, setUserInfo] = useState(null);
  const [editForm, setEditForm] = useState({});

  // Show message
  const showMessage = useCallback((type, text, duration = 5000) => {
    setMessage({ type, text });
    if (messageTimeoutRef.current) clearTimeout(messageTimeoutRef.current);
    if (duration > 0) {
      messageTimeoutRef.current = setTimeout(() => {
        setMessage({ type: '', text: '' });
      }, duration);
    }
  }, []);

  // Fetch user data from API
  const fetchUserData = useCallback(async () => {
    setIsLoading(true);
    try {
      // Try to get user profile first
      let userData;
      try {
        userData = await apiServices.getUserProfile();
      } catch (profileError) {
        // If profile endpoint fails, try general user endpoint
        console.log('Profile endpoint failed, trying user endpoint');
        userData = await apiServices.getUser();
      }
      
      // Check for cached avatar in localStorage
      const cachedAvatar = localStorage.getItem('user_avatar');
      
      // Transform API data to match our component structure based on your API response
      const transformedData = {
        id: userData.id,
        name: userData.name || '',
        last_name: userData.last_name || '',
        email: userData.email || '',
        phone: userData.phone || '',
        location: userData.address || '',
        city: userData.city || '',
        state: userData.state || '',
        country: userData.country || '',
        zip_code: userData.zip_code || '',
        website: userData.website || '',
        joinDate: userData.created_at ? new Date(userData.created_at).toLocaleDateString('en-US', { 
          year: 'numeric', 
          month: 'long', 
          day: 'numeric' 
        }) : 'Not available',
        company: userData.company || '',
        bio: userData.bio || 'No bio available',
        title: userData.title || '',
        // Use cached avatar from localStorage if available, otherwise use from API
        avatar: cachedAvatar || userData.avatar || null,
        account_type: userData.user_type === 1 ? 'User' : 'Lawyer',
        is_verified: userData.is_verified,
        email_verified_at: userData.email_verified_at,
        active: userData.active,
        stats: {
          appointments: userData.appointments?.length || 0,
          queries: userData.legal_queries?.length || 0,
          reviews: userData.reviews?.length || 0
        },
        // Initialize these with empty arrays if not provided by API
        skills: [],
        achievements: [],
        social: {
          twitter: '',
          linkedin: '',
          github: '',
          facebook: ''
        },
        // Use actual data from API if available
        appointments: userData.appointments || [],
        legal_queries: userData.legal_queries || [],
        reviews: userData.reviews || []
      };

      setUserInfo(transformedData);
      setEditForm(transformedData);
      showMessage('success', 'Profile loaded successfully');
      
      // Store the transformed data in localStorage for offline access
      localStorage.setItem('user_profile_transformed', JSON.stringify(transformedData));
    } catch (error) {
      console.error('Failed to fetch user data:', error);
      
      // Try to get from localStorage first before falling back to demo data
      const cachedProfile = localStorage.getItem('user_profile_transformed');
      if (cachedProfile) {
        try {
          const parsedProfile = JSON.parse(cachedProfile);
          setUserInfo(parsedProfile);
          setEditForm(parsedProfile);
          showMessage('info', 'Using cached profile data');
        } catch (parseError) {
          console.error('Error parsing cached profile:', parseError);
          setUserInfo(demoProfile);
          setEditForm(demoProfile);
          showMessage('error', 'Failed to load profile. Using demo data.');
        }
      } else {
        setUserInfo(demoProfile);
        setEditForm(demoProfile);
        showMessage('error', 'Failed to load profile. Using demo data.');
      }
    } finally {
      setIsLoading(false);
    }
  }, [showMessage]);

  useEffect(() => {
    fetchUserData();
    return () => {
      if (messageTimeoutRef.current) clearTimeout(messageTimeoutRef.current);
    };
  }, [fetchUserData]);

  // Validate form
  const validateForm = useCallback(() => {
    const newErrors = {};
    
    if (!editForm.name?.trim()) {
      newErrors.name = 'First name is required';
    }
    
    if (!editForm.email?.trim()) {
      newErrors.email = 'Email is required';
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(editForm.email)) {
      newErrors.email = 'Invalid email address';
    }
    
    if (editForm.phone && !/^[+]?[1-9][\d\s\-\(\)]{7,15}$/.test(editForm.phone)) {
      newErrors.phone = 'Invalid phone number';
    }
    
    if (editForm.website && !/^https?:\/\/.+\..+/.test(editForm.website)) {
      newErrors.website = 'Invalid URL format';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  }, [editForm]);

  // Handle image upload
  const handleImageUpload = useCallback(async (e) => {
    const file = e.target.files?.[0];
    if (!file) return;

    // Validate file size (2MB limit)
    if (file.size > 2 * 1024 * 1024) {
      showMessage('error', 'Image size must be less than 2MB');
      return;
    }

    // Validate file type
    const allowedTypes = ['image/jpeg', 'image/png', 'image/jpg', 'image/gif', 'image/webp'];
    if (!allowedTypes.includes(file.type)) {
      showMessage('error', 'Please select a valid image file (JPEG, PNG, GIF, WebP)');
      return;
    }

    try {
      setIsUploadingAvatar(true);
      
      // Create a local preview immediately for better UX
      const reader = new FileReader();
      reader.onloadend = () => {
        const previewUrl = reader.result;
        setImagePreview(previewUrl);
        
        // Store in localStorage immediately for offline access
        localStorage.setItem('user_avatar', previewUrl);
        
        // Update user object in localStorage if it exists
        const storedUser = localStorage.getItem('user');
        if (storedUser) {
          try {
            const parsedUser = JSON.parse(storedUser);
            parsedUser.avatar = previewUrl;
            localStorage.setItem('user', JSON.stringify(parsedUser));
          } catch (e) {
            console.error('Error updating user avatar in localStorage:', e);
          }
        }
      };
      reader.readAsDataURL(file);
      
      // Upload to server
      const result = await apiServices.uploadAvatar(file);
      
      // Get the avatar URL from the response
      const avatarUrl = result.avatar_url || result.url || result.path || result.avatar;
      
      // Update state with the server URL
      setUserInfo(prev => ({ ...prev, avatar: avatarUrl }));
      setEditForm(prev => ({ ...prev, avatar: avatarUrl }));
      
      // Update the transformed profile in localStorage
      const storedProfile = localStorage.getItem('user_profile_transformed');
      if (storedProfile) {
        try {
          const parsedProfile = JSON.parse(storedProfile);
          parsedProfile.avatar = avatarUrl;
          localStorage.setItem('user_profile_transformed', JSON.stringify(parsedProfile));
        } catch (e) {
          console.error('Error updating profile avatar in localStorage:', e);
        }
      }
      
      showMessage('success', 'Avatar updated successfully!');
    } catch (error) {
      console.error('Avatar upload failed:', error);
      
      // Even if the upload fails, keep the local preview
      if (imagePreview) {
        setUserInfo(prev => ({ ...prev, avatar: imagePreview }));
        setEditForm(prev => ({ ...prev, avatar: imagePreview }));
        showMessage('warning', 'Avatar saved locally but failed to upload to server. It will be synced when connection is restored.');
      } else {
        showMessage('error', 'Failed to upload avatar. Please try again.');
      }
    } finally {
      setIsUploadingAvatar(false);
      if (fileInputRef.current) fileInputRef.current.value = '';
    }
  }, [showMessage, imagePreview]);

  // Save profile changes
  const handleSave = useCallback(async () => {
    if (!validateForm()) {
      showMessage('error', 'Please fix the errors in the form');
      return;
    }

    try {
      setIsSaving(true);
      
      // Prepare data for API based on your API structure
      const updateData = {
        name: editForm.name,
        email: editForm.email,
        phone: editForm.phone,
        address: editForm.location,
        city: editForm.city,
        state: editForm.state,
        country: editForm.country,
        zip_code: editForm.zip_code,
        website: editForm.website,
        company: editForm.company,
        bio: editForm.bio,
        title: editForm.title,
        avatar: editForm.avatar,
        // Include these if your API supports them
        skills: editForm.skills,
        social: editForm.social
      };

      // Save to localStorage first for offline capability
      const currentProfile = { ...userInfo, ...updateData };
      localStorage.setItem('user_profile_transformed', JSON.stringify(currentProfile));
      
      // Update user in localStorage
      const storedUser = localStorage.getItem('user');
      if (storedUser) {
        try {
          const parsedUser = JSON.parse(storedUser);
          const updatedUser = {
            ...parsedUser,
            name: updateData.name,
            last_name: updateData.last_name,
            email: updateData.email,
            avatar: updateData.avatar
          };
          localStorage.setItem('user', JSON.stringify(updatedUser));
        } catch (e) {
          console.error('Error updating user in localStorage:', e);
        }
      }

      // Send to server
      const updatedProfile = await apiServices.updateUserProfile(updateData);
      
      // Transform the response back to our component structure
      const transformedData = {
        ...editForm,
        ...updatedProfile,
        name: updatedProfile.name || updatedProfile.first_name || editForm.name,
        last_name: updatedProfile.last_name || updatedProfile.surname || editForm.last_name,
        social: updatedProfile.social || editForm.social,
        // Preserve the avatar if it's not in the response
        avatar: updatedProfile.avatar || editForm.avatar
      };

      // Update state
      setUserInfo(transformedData);
      setIsEditing(false);
      setImagePreview(null);
      
      // Update localStorage with the server response
      localStorage.setItem('user_profile_transformed', JSON.stringify(transformedData));
      
      showMessage('success', 'Profile updated successfully!');
    } catch (error) {
      console.error('Profile update failed:', error);
      
      // Even if the server update fails, keep the local changes
      setUserInfo(prev => ({ ...prev, ...editForm }));
      setIsEditing(false);
      setImagePreview(null);
      
      showMessage('warning', 'Profile saved locally but failed to update on server. Changes will be synced when connection is restored.');
    } finally {
      setIsSaving(false);
    }
  }, [editForm, validateForm, showMessage, userInfo]);

  // Cancel editing
  const handleCancel = useCallback(() => {
    setEditForm(userInfo);
    setImagePreview(null);
    setIsEditing(false);
    setErrors({});
    setMessage({ type: '', text: '' });
    if (fileInputRef.current) fileInputRef.current.value = '';
  }, [userInfo]);

  // Handle share
  const handleShare = useCallback(async () => {
    try {
      const shareData = {
        title: `${userInfo.name} ${userInfo.last_name}'s Profile`,
        text: userInfo.bio,
        url: window.location.href
      };

      if (navigator.share) {
        await navigator.share(shareData);
        showMessage('success', 'Profile shared successfully!');
      } else if (navigator.clipboard) {
        await navigator.clipboard.writeText(window.location.href);
        showMessage('success', 'Profile link copied to clipboard!');
      } else {
        showMessage('error', 'Sharing not supported on this device');
      }
    } catch (error) {
      if (error.name !== 'AbortError') {
        showMessage('error', 'Failed to share profile');
      }
    }
  }, [userInfo, showMessage]);

  // Handle export
  const handleExport = useCallback(() => {
    try {
      const exportData = {
        ...userInfo,
        exportDate: new Date().toISOString(),
        exportVersion: '1.0'
      };
      
      const dataStr = JSON.stringify(exportData, null, 2);
      const dataUri = 'data:application/json;charset=utf-8,' + encodeURIComponent(dataStr);
      const linkElement = document.createElement('a');
      linkElement.setAttribute('href', dataUri);
      linkElement.setAttribute('download', `${userInfo.name}_${userInfo.last_name}_profile.json`);
      linkElement.click();
      showMessage('success', 'Profile exported successfully!');
    } catch (error) {
      showMessage('error', 'Failed to export profile');
    }
  }, [userInfo, showMessage]);

  // Handle form input changes
  const handleInputChange = useCallback((field, value) => {
    setEditForm(prev => ({ ...prev, [field]: value }));
    // Clear error when user starts typing
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  }, [errors]);
  
  // Handle social media input changes
  const handleSocialInputChange = useCallback((platform, value) => {
    setEditForm(prev => ({
      ...prev,
      social: {
        ...prev.social,
        [platform]: value
      }
    }));
  }, []);
  
  // Add a new skill
  const handleAddSkill = useCallback(() => {
    if (!skillInput.trim()) return;
    
    // Check if skill already exists
    if (editForm.skills?.includes(skillInput.trim())) {
      showMessage('error', 'This skill already exists');
      return;
    }
    
    setEditForm(prev => ({
      ...prev,
      skills: [...(prev.skills || []), skillInput.trim()]
    }));
    
    setSkillInput('');
    if (skillInputRef.current) {
      skillInputRef.current.focus();
    }
  }, [skillInput, editForm.skills, showMessage]);
  
  // Remove a skill
  const handleRemoveSkill = useCallback((skillToRemove) => {
    setEditForm(prev => ({
      ...prev,
      skills: prev.skills.filter(skill => skill !== skillToRemove)
    }));
  }, []);
  
  // Handle skill input keypress (add on Enter)
  const handleSkillKeyPress = useCallback((e) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      handleAddSkill();
    }
  }, [handleAddSkill]);
  
  // Handle password form input
  const handlePasswordChange = useCallback((field, value) => {
    setPasswordForm(prev => ({
      ...prev,
      [field]: value
    }));
    
    // Clear error when user types
    if (errors[field]) {
      setErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[field];
        return newErrors;
      });
    }
  }, [errors]);
  
  // Validate password form
  const validatePasswordForm = useCallback(() => {
    const newErrors = {};
    
    if (!passwordForm.current_password) {
      newErrors.current_password = 'Current password is required';
    }
    
    if (!passwordForm.new_password) {
      newErrors.new_password = 'New password is required';
    } else if (passwordForm.new_password.length < 8) {
      newErrors.new_password = 'Password must be at least 8 characters';
    }
    
    if (!passwordForm.new_password_confirmation) {
      newErrors.new_password_confirmation = 'Please confirm your new password';
    } else if (passwordForm.new_password !== passwordForm.new_password_confirmation) {
      newErrors.new_password_confirmation = 'Passwords do not match';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  }, [passwordForm]);
  
  // Submit password change
  const handlePasswordSubmit = useCallback(async (e) => {
    e.preventDefault();
    
    if (!validatePasswordForm()) {
      showMessage('error', 'Please fix the errors in the form');
      return;
    }
    
    try {
      setIsChangingPassword(true);
      
      const response = await apiServices.changePassword(passwordForm);
      
      // Reset form
      setPasswordForm({
        current_password: '',
        new_password: '',
        new_password_confirmation: ''
      });
      
      showMessage('success', response.message || 'Password changed successfully');
    } catch (error) {
      console.error('Password change error:', error);
      
      // Handle validation errors from the server
      if (error.response?.data?.errors) {
        const serverErrors = {};
        Object.entries(error.response.data.errors).forEach(([key, value]) => {
          serverErrors[key] = Array.isArray(value) ? value[0] : value;
        });
        setErrors(serverErrors);
      }
      
      showMessage('error', error.response?.data?.message || 'Failed to change password');
    } finally {
      setIsChangingPassword(false);
    }
  }, [passwordForm, validatePasswordForm, showMessage]);

  // Loading state
  if (isLoading) {
    return (
      <div className="flex justify-center items-center min-h-screen bg-gray-50 dark:bg-gray-900">
        <div className="text-center p-8 rounded-xl bg-white dark:bg-gray-800 shadow-xl max-w-md w-full">
          <div className="relative w-20 h-20 mx-auto mb-6">
            <div className="absolute inset-0 rounded-full border-t-4 border-blue-500 animate-spin"></div>
            <div className="absolute inset-3 rounded-full bg-white dark:bg-gray-800 flex items-center justify-center">
              <Loader className="w-8 h-8 text-blue-500 animate-pulse" />
            </div>
          </div>
          <h2 className="text-xl font-bold text-gray-800 dark:text-white mb-2">Loading Profile</h2>
          <p className="text-gray-500 dark:text-gray-400">Please wait while we fetch your information...</p>
        </div>
      </div>
    );
  }

  if (!userInfo) {
    return (
      <div className="flex justify-center items-center min-h-screen bg-gray-50 dark:bg-gray-900">
        <div className="text-center p-8 rounded-xl bg-white dark:bg-gray-800 shadow-xl max-w-md w-full">
          <AlertCircle className="w-16 h-16 text-red-500 mx-auto mb-4" />
          <h2 className="text-xl font-bold text-gray-800 dark:text-white mb-2">Failed to Load Profile</h2>
          <p className="text-gray-500 dark:text-gray-400 mb-6">We couldn't load your profile information. Please try again.</p>
          <button 
            onClick={fetchUserData}
            className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors shadow-md flex items-center justify-center mx-auto"
          >
            <RefreshCw className="w-4 h-4 mr-2" /> Retry
          </button>
        </div>
      </div>
    );
  }

  // Main UI
  return (
    <div className={`min-h-screen pt-20 ${isDarkMode ? 'bg-gray-900 text-white' : 'bg-gray-50 text-gray-900'} transition-colors duration-300 relative`}>
      {/* Close Button */}
      <button 
        onClick={() => window.history.back()}
        className="fixed top-24 right-6 z-50 bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-200 p-3 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 hover:bg-gray-100 dark:hover:bg-gray-700 group"
        aria-label="Close profile"
      >
        <X className="w-5 h-5 group-hover:rotate-90 transition-transform duration-300" />
      </button>
      
      {/* Message Alert */}
      {message.text && (
        <div className={`fixed top-20 right-4 max-w-sm w-full p-4 rounded-lg shadow-lg flex items-center space-x-2 z-50 ${
          message.type === 'success' ? 'bg-green-500 text-white' : 'bg-red-500 text-white'
        }`} role="alert">
          {message.type === 'success' ? <CheckCircle className="w-5 h-5" /> : <AlertCircle className="w-5 h-5" />}
          <span className="flex-1">{message.text}</span>
          <button 
            onClick={() => setMessage({ type: '', text: '' })} 
            className="ml-auto p-1 rounded-full hover:bg-white hover:bg-opacity-20"
          >
            <X className="w-4 h-4" />
          </button>
        </div>
      )}

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 dark:text-white">My Profile</h1>
          <p className="text-gray-600 dark:text-gray-400 mt-1">Manage your personal information and account settings</p>
        </div>

        {/* Tabs - Desktop */}
        <div className="hidden md:flex mb-8 border-b border-gray-200 dark:border-gray-700">
          <button
            onClick={() => setActiveTab('profile')}
            className={`px-6 py-3 font-medium text-sm focus:outline-none ${
              activeTab === 'profile'
                ? 'text-blue-600 border-b-2 border-blue-600 dark:text-blue-400 dark:border-blue-400'
                : 'text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300'
            }`}
          >
            <User className="w-4 h-4 inline mr-2" />
            Profile
          </button>
          <button
            onClick={() => setActiveTab('security')}
            className={`px-6 py-3 font-medium text-sm focus:outline-none ${
              activeTab === 'security'
                ? 'text-blue-600 border-b-2 border-blue-600 dark:text-blue-400 dark:border-blue-400'
                : 'text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300'
            }`}
          >
            <Lock className="w-4 h-4 inline mr-2" />
            Security
          </button>
          <button
            onClick={() => setActiveTab('notifications')}
            className={`px-6 py-3 font-medium text-sm focus:outline-none ${
              activeTab === 'notifications'
                ? 'text-blue-600 border-b-2 border-blue-600 dark:text-blue-400 dark:border-blue-400'
                : 'text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300'
            }`}
          >
            <Bell className="w-4 h-4 inline mr-2" />
            Notifications
          </button>
          <button
            onClick={() => setActiveTab('preferences')}
            className={`px-6 py-3 font-medium text-sm focus:outline-none ${
              activeTab === 'preferences'
                ? 'text-blue-600 border-b-2 border-blue-600 dark:text-blue-400 dark:border-blue-400'
                : 'text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300'
            }`}
          >
            <Settings className="w-4 h-4 inline mr-2" />
            Preferences
          </button>
        </div>

        {/* Tabs - Mobile */}
        <div className="md:hidden mb-6">
          <select
            value={activeTab}
            onChange={(e) => setActiveTab(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded-md bg-white dark:bg-gray-800 dark:border-gray-700 text-gray-900 dark:text-white"
          >
            <option value="profile">Profile</option>
            <option value="security">Security</option>
            <option value="notifications">Notifications</option>
            <option value="preferences">Preferences</option>
          </select>
        </div>

        {/* Profile Tab Content */}
        {activeTab === 'profile' && (
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            {/* Left Column - Profile Card */}
            <div className="lg:col-span-1">
              <div className="bg-white dark:bg-gray-800 rounded-xl shadow-md overflow-hidden">
                {/* Profile Header with Cover Image */}
                <div className="h-32 bg-gradient-to-r from-blue-500 to-indigo-600 relative">
                  {userInfo.account_type === 'Lawyer' && (
                    <div className="absolute top-4 right-4 bg-indigo-600 text-white px-3 py-1 rounded-full text-xs font-medium flex items-center">
                      <Briefcase className="w-3 h-3 mr-1" /> Legal Professional
                    </div>
                  )}
                  
                  {!isEditing ? (
                    <button 
                      onClick={() => setIsEditing(true)}
                      className="absolute top-4 left-4 bg-white bg-opacity-20 text-white p-2 rounded-full hover:bg-opacity-30 transition-colors"
                    >
                      <Pencil className="w-4 h-4" />
                    </button>
                  ) : (
                    <div className="absolute top-4 left-4 flex space-x-2">
                      <button 
                        onClick={handleSave}
                        disabled={isSaving}
                        className="bg-green-500 text-white p-2 rounded-full hover:bg-green-600 transition-colors disabled:opacity-50 shadow-md"
                      >
                        {isSaving ? <Loader className="w-4 h-4 animate-spin" /> : <Check className="w-4 h-4" />}
                      </button>
                      <button 
                        onClick={handleCancel}
                        disabled={isSaving}
                        className="bg-red-500 text-white p-2 rounded-full hover:bg-red-600 transition-colors disabled:opacity-50 shadow-md"
                      >
                        <X className="w-4 h-4" />
                      </button>
                    </div>
                  )}
                </div>
                
                {/* Avatar */}
                <div className="relative -mt-16 px-6">
                  <div className="relative inline-block">
                    <img
                      src={imagePreview || userInfo.avatar || `https://ui-avatars.com/api/?name=${encodeURIComponent(userInfo.name + ' ' + userInfo.last_name)}&size=150&background=0ea5e9&color=ffffff`}
                      alt="Profile"
                      className="w-32 h-32 rounded-full border-4 border-white dark:border-gray-800 object-cover shadow-md transition-all duration-300 hover:shadow-lg"
                      onError={(e) => {
                        // If the image fails to load, try getting it from localStorage
                        const cachedAvatar = localStorage.getItem('user_avatar');
                        if (cachedAvatar) {
                          e.target.src = cachedAvatar;
                        } else {
                          // If no cached avatar, use the UI Avatars service
                          e.target.src = `https://ui-avatars.com/api/?name=${encodeURIComponent(userInfo.name + ' ' + userInfo.last_name)}&size=150&background=0ea5e9&color=ffffff`;
                        }
                      }}
                      style={{
                        objectFit: 'cover',
                        boxShadow: '0 4px 14px rgba(0, 0, 0, 0.1)'
                      }}
                    />
                    
                    {isEditing && (
                      <label className="absolute bottom-0 right-0 bg-blue-600 text-white p-2 rounded-full cursor-pointer hover:bg-blue-700 transition-colors">
                        <Camera className="w-4 h-4" />
                        <input 
                          ref={fileInputRef} 
                          type="file" 
                          accept="image/*" 
                          onChange={handleImageUpload} 
                          className="hidden" 
                        />
                      </label>
                    )}
                    
                    {isUploadingAvatar && (
                      <div className="absolute inset-0 bg-black bg-opacity-50 rounded-full flex items-center justify-center">
                        <Loader className="w-6 h-6 text-white animate-spin" />
                      </div>
                    )}
                  </div>
                </div>
                
                {/* Profile Info */}
                <div className="px-6 py-4">
                  {isEditing ? (
                    <div className="space-y-3 mb-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                          First Name <span className="text-red-500">*</span>
                        </label>
                        <input
                          type="text"
                          value={editForm.name || ''}
                          onChange={(e) => handleInputChange('name', e.target.value)}
                          className={`w-full px-3 py-2 border ${errors.name ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'} rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white`}
                        />
                        {errors.name && <p className="mt-1 text-sm text-red-500">{errors.name}</p>}
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                          Last Name
                        </label>
                        <input
                          type="text"
                          value={editForm.last_name || ''}
                          onChange={(e) => handleInputChange('last_name', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                        />
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                          Job Title
                        </label>
                        <input
                          type="text"
                          value={editForm.title || ''}
                          onChange={(e) => handleInputChange('title', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                        />
                      </div>
                    </div>
                  ) : (
                    <>
                      <h2 className="text-2xl font-bold text-gray-900 dark:text-white">{userInfo.name} {userInfo.last_name}</h2>
                      <p className="text-blue-600 dark:text-blue-400">{userInfo.title || 'No title specified'}</p>
                    </>
                  )}
                  
                  <div className="mt-4">
                    {isEditing ? (
                      <div>
                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                          Bio
                        </label>
                        <textarea
                          value={editForm.bio || ''}
                          onChange={(e) => handleInputChange('bio', e.target.value)}
                          rows="4"
                          className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                        ></textarea>
                      </div>
                    ) : (
                      <p className="text-gray-600 dark:text-gray-400 text-sm">{userInfo.bio}</p>
                    )}
                  </div>
                  
                  {/* Stats */}
                  <div className="mt-6 grid grid-cols-3 gap-4 border-t border-gray-200 dark:border-gray-700 pt-4">
                    <div className="text-center">
                      <p className="text-2xl font-bold text-gray-900 dark:text-white">{userInfo.stats.appointments.toLocaleString()}</p>
                      <p className="text-sm text-gray-500 dark:text-gray-400">Appointments</p>
                    </div>
                    <div className="text-center">
                      <p className="text-2xl font-bold text-gray-900 dark:text-white">{userInfo.stats.queries.toLocaleString()}</p>
                      <p className="text-sm text-gray-500 dark:text-gray-400">Queries</p>
                    </div>
                    <div className="text-center">
                      <p className="text-2xl font-bold text-gray-900 dark:text-white">{userInfo.stats.reviews.toLocaleString()}</p>
                      <p className="text-sm text-gray-500 dark:text-gray-400">Reviews</p>
                    </div>
                  </div>
                  
                  {/* Social Links */}
                  <div className="mt-6 border-t border-gray-200 dark:border-gray-700 pt-4">
                    <h3 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">Social Profiles</h3>
                    
                    {isEditing ? (
                      <div className="space-y-3">
                        <div className="flex items-center">
                          <Linkedin className="w-5 h-5 text-blue-600 mr-2" />
                          <input
                            type="url"
                            placeholder="LinkedIn URL"
                            value={editForm.social?.linkedin || ''}
                            onChange={(e) => handleSocialInputChange('linkedin', e.target.value)}
                            className="flex-1 px-3 py-1 text-sm border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                          />
                        </div>
                        <div className="flex items-center">
                          <Twitter className="w-5 h-5 text-blue-400 mr-2" />
                          <input
                            type="url"
                            placeholder="Twitter URL"
                            value={editForm.social?.twitter || ''}
                            onChange={(e) => handleSocialInputChange('twitter', e.target.value)}
                            className="flex-1 px-3 py-1 text-sm border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                          />
                        </div>
                        <div className="flex items-center">
                          <Github className="w-5 h-5 text-gray-800 dark:text-white mr-2" />
                          <input
                            type="url"
                            placeholder="GitHub URL"
                            value={editForm.social?.github || ''}
                            onChange={(e) => handleSocialInputChange('github', e.target.value)}
                            className="flex-1 px-3 py-1 text-sm border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                          />
                        </div>
                        <div className="flex items-center">
                          <Facebook className="w-5 h-5 text-blue-800 mr-2" />
                          <input
                            type="url"
                            placeholder="Facebook URL"
                            value={editForm.social?.facebook || ''}
                            onChange={(e) => handleSocialInputChange('facebook', e.target.value)}
                            className="flex-1 px-3 py-1 text-sm border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                          />
                        </div>
                      </div>
                    ) : (
                      <div className="flex justify-center space-x-4">
                        {userInfo.social?.linkedin && (
                          <a href={userInfo.social.linkedin} target="_blank" rel="noopener noreferrer" className="text-gray-500 hover:text-blue-600 dark:text-gray-400 dark:hover:text-blue-400">
                            <Linkedin className="w-5 h-5" />
                          </a>
                        )}
                        {userInfo.social?.twitter && (
                          <a href={userInfo.social.twitter} target="_blank" rel="noopener noreferrer" className="text-gray-500 hover:text-blue-400 dark:text-gray-400 dark:hover:text-blue-400">
                            <Twitter className="w-5 h-5" />
                          </a>
                        )}
                        {userInfo.social?.github && (
                          <a href={userInfo.social.github} target="_blank" rel="noopener noreferrer" className="text-gray-500 hover:text-gray-800 dark:text-gray-400 dark:hover:text-white">
                            <Github className="w-5 h-5" />
                          </a>
                        )}
                        {userInfo.social?.facebook && (
                          <a href={userInfo.social.facebook} target="_blank" rel="noopener noreferrer" className="text-gray-500 hover:text-blue-800 dark:text-gray-400 dark:hover:text-blue-400">
                            <Facebook className="w-5 h-5" />
                          </a>
                        )}
                        {!userInfo.social?.linkedin && !userInfo.social?.twitter && !userInfo.social?.github && !userInfo.social?.facebook && !isEditing && (
                          <span className="text-sm text-gray-500 dark:text-gray-400">No social profiles added</span>
                        )}
                      </div>
                    )}
                  </div>
                  
                  {/* Action Buttons */}
                  {!isEditing && (
                    <div className="mt-6 flex space-x-3">
                      <button 
                        onClick={handleShare} 
                        className="flex-1 flex items-center justify-center px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-gray-200 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none"
                      >
                        <Share2 className="w-4 h-4 mr-2" /> Share
                      </button>
                      <button 
                        onClick={handleExport} 
                        className="flex-1 flex items-center justify-center px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-gray-200 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none"
                      >
                        <Download className="w-4 h-4 mr-2" /> Export
                      </button>
                    </div>
                  )}
                </div>
              </div>
              
              {/* Member Since Card */}
              <div className="mt-6 bg-white dark:bg-gray-800 rounded-xl shadow-md p-6">
                <div className="flex items-center">
                  <Calendar className="w-5 h-5 text-blue-600 dark:text-blue-400 mr-3" />
                  <div>
                    <h3 className="text-sm font-medium text-gray-700 dark:text-gray-300">Member Since</h3>
                    <p className="text-gray-900 dark:text-white font-medium">{userInfo.joinDate}</p>
                  </div>
                </div>
              </div>
            </div>
            
            {/* Right Column - Details */}
            <div className="lg:col-span-2 space-y-6">
              {/* Contact Information */}
              <div className="bg-white dark:bg-gray-800 rounded-xl shadow-md overflow-hidden">
                <div className="px-6 py-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
                  <h2 className="text-lg font-medium text-gray-900 dark:text-white">Contact Information</h2>
                  {!isEditing && (
                    <button 
                      onClick={() => setIsEditing(true)}
                      className="text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 flex items-center text-sm"
                    >
                      <Pencil className="w-4 h-4 mr-1" /> Edit
                    </button>
                  )}
                </div>
                
                <div className="p-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {/* Email */}
                    <div>
                      {isEditing ? (
                        <div>
                          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            Email <span className="text-red-500">*</span>
                          </label>
                          <input
                            type="email"
                            value={editForm.email || ''}
                            onChange={(e) => handleInputChange('email', e.target.value)}
                            className={`w-full px-3 py-2 border ${errors.email ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'} rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white`}
                          />
                          {errors.email && <p className="mt-1 text-sm text-red-500">{errors.email}</p>}
                        </div>
                      ) : (
                        <div className="flex">
                          <Mail className="w-5 h-5 text-gray-400 mr-3" />
                          <div>
                            <p className="text-sm font-medium text-gray-500 dark:text-gray-400">Email</p>
                            <p className="text-gray-900 dark:text-white">{userInfo.email}</p>
                          </div>
                        </div>
                      )}
                    </div>
                    
                    {/* Phone */}
                    <div>
                      {isEditing ? (
                        <div>
                          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            Phone
                          </label>
                          <input
                            type="tel"
                            value={editForm.phone || ''}
                            onChange={(e) => handleInputChange('phone', e.target.value)}
                            className={`w-full px-3 py-2 border ${errors.phone ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'} rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white`}
                          />
                          {errors.phone && <p className="mt-1 text-sm text-red-500">{errors.phone}</p>}
                        </div>
                      ) : (
                        <div className="flex">
                          <Phone className="w-5 h-5 text-gray-400 mr-3" />
                          <div>
                            <p className="text-sm font-medium text-gray-500 dark:text-gray-400">Phone</p>
                            <p className="text-gray-900 dark:text-white">{userInfo.phone || 'Not specified'}</p>
                          </div>
                        </div>
                      )}
                    </div>
                    
                    {/* Location */}
                    <div>
                      {isEditing ? (
                        <div>
                          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            Address
                          </label>
                          <input
                            type="text"
                            value={editForm.location || ''}
                            onChange={(e) => handleInputChange('location', e.target.value)}
                            className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white mb-2"
                            placeholder="Street address"
                          />
                          <div className="grid grid-cols-2 gap-2 mb-2">
                            <input
                              type="text"
                              value={editForm.city || ''}
                              onChange={(e) => handleInputChange('city', e.target.value)}
                              className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                              placeholder="City"
                            />
                            <input
                              type="text"
                              value={editForm.state || ''}
                              onChange={(e) => handleInputChange('state', e.target.value)}
                              className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                              placeholder="State/Province"
                            />
                          </div>
                          <div className="grid grid-cols-2 gap-2">
                            <input
                              type="text"
                              value={editForm.country || ''}
                              onChange={(e) => handleInputChange('country', e.target.value)}
                              className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                              placeholder="Country"
                            />
                            <input
                              type="text"
                              value={editForm.zip_code || ''}
                              onChange={(e) => handleInputChange('zip_code', e.target.value)}
                              className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                              placeholder="Zip/Postal Code"
                            />
                          </div>
                        </div>
                      ) : (
                        <div className="flex">
                          <MapPin className="w-5 h-5 text-gray-400 mr-3" />
                          <div>
                            <p className="text-sm font-medium text-gray-500 dark:text-gray-400">Address</p>
                            <p className="text-gray-900 dark:text-white">
                              {userInfo.location ? (
                                <>
                                  {userInfo.location}
                                  {(userInfo.city || userInfo.state || userInfo.country) && (
                                    <span className="block mt-1 text-sm">
                                      {[
                                        userInfo.city,
                                        userInfo.state,
                                        userInfo.country,
                                        userInfo.zip_code
                                      ].filter(Boolean).join(', ')}
                                    </span>
                                  )}
                                </>
                              ) : (
                                'Not specified'
                              )}
                            </p>
                          </div>
                        </div>
                      )}
                    </div>
                    
                    {/* Website */}
                    <div>
                      {isEditing ? (
                        <div>
                          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            Website
                          </label>
                          <input
                            type="url"
                            value={editForm.website || ''}
                            onChange={(e) => handleInputChange('website', e.target.value)}
                            className={`w-full px-3 py-2 border ${errors.website ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'} rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white`}
                          />
                          {errors.website && <p className="mt-1 text-sm text-red-500">{errors.website}</p>}
                        </div>
                      ) : (
                        <div className="flex">
                          <Globe className="w-5 h-5 text-gray-400 mr-3" />
                          <div>
                            <p className="text-sm font-medium text-gray-500 dark:text-gray-400">Website</p>
                            {userInfo.website ? (
                              <a 
                                href={userInfo.website} 
                                target="_blank" 
                                rel="noopener noreferrer" 
                                className="text-blue-600 dark:text-blue-400 hover:underline"
                              >
                                {userInfo.website}
                              </a>
                            ) : (
                              <p className="text-gray-900 dark:text-white">Not specified</p>
                            )}
                          </div>
                        </div>
                      )}
                    </div>
                    
                    {/* Company */}
                    <div>
                      {isEditing ? (
                        <div>
                          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            Company
                          </label>
                          <input
                            type="text"
                            value={editForm.company || ''}
                            onChange={(e) => handleInputChange('company', e.target.value)}
                            className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                          />
                        </div>
                      ) : (
                        <div className="flex">
                          <Building className="w-5 h-5 text-gray-400 mr-3" />
                          <div>
                            <p className="text-sm font-medium text-gray-500 dark:text-gray-400">Company</p>
                            <p className="text-gray-900 dark:text-white">{userInfo.company || 'Not specified'}</p>
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
              
              {/* Skills */}
              <div className="bg-white dark:bg-gray-800 rounded-xl shadow-md overflow-hidden">
                <div className="px-6 py-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
                  <h2 className="text-lg font-medium text-gray-900 dark:text-white">Skills</h2>
                  {!isEditing && (
                    <button 
                      onClick={() => setIsEditing(true)}
                      className="text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 flex items-center text-sm"
                    >
                      <Pencil className="w-4 h-4 mr-1" /> Edit
                    </button>
                  )}
                </div>
                
                <div className="p-6">
                  {isEditing ? (
                    <div>
                      <div className="flex mb-4">
                        <input
                          type="text"
                          ref={skillInputRef}
                          value={skillInput}
                          onChange={(e) => setSkillInput(e.target.value)}
                          onKeyPress={handleSkillKeyPress}
                          placeholder="Add a skill..."
                          className="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-l-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                        />
                        <button
                          onClick={handleAddSkill}
                          className="px-4 py-2 bg-blue-600 text-white rounded-r-md hover:bg-blue-700 focus:outline-none"
                        >
                          Add
                        </button>
                      </div>
                      
                      <div className="flex flex-wrap gap-2">
                        {editForm.skills?.length > 0 ? (
                          editForm.skills.map((skill, index) => (
                            <div 
                              key={index} 
                              className="bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-3 py-1 rounded-full text-sm flex items-center"
                            >
                              {skill}
                              <button 
                                onClick={() => handleRemoveSkill(skill)}
                                className="ml-2 text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 focus:outline-none"
                              >
                                <X className="w-3 h-3" />
                              </button>
                            </div>
                          ))
                        ) : (
                          <p className="text-gray-500 dark:text-gray-400 text-sm">No skills added yet</p>
                        )}
                      </div>
                    </div>
                  ) : (
                    <div className="flex flex-wrap gap-2">
                      {userInfo.skills?.length > 0 ? (
                        userInfo.skills.map((skill, index) => (
                          <span 
                            key={index} 
                            className="bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-3 py-1 rounded-full text-sm"
                          >
                            {skill}
                          </span>
                        ))
                      ) : (
                        <p className="text-gray-500 dark:text-gray-400 text-sm">No skills added yet</p>
                      )}
                    </div>
                  )}
                </div>
              </div>
              
              {/* Achievements */}
              <div className="bg-white dark:bg-gray-800 rounded-xl shadow-md overflow-hidden">
                <div className="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                  <h2 className="text-lg font-medium text-gray-900 dark:text-white">Achievements</h2>
                </div>
                
                <div className="p-6">
                  {userInfo.achievements?.length > 0 ? (
                    <ul className="space-y-3">
                      {userInfo.achievements.map((achievement, index) => (
                        <li key={index} className="flex items-start">
                          <Award className="w-5 h-5 text-yellow-500 mr-3 mt-0.5" />
                          <span className="text-gray-900 dark:text-white">{achievement}</span>
                        </li>
                      ))}
                    </ul>
                  ) : (
                    <p className="text-gray-500 dark:text-gray-400 text-sm">No achievements added yet</p>
                  )}
                </div>
              </div>
              
              {/* Recent Activity */}
              <div className="bg-white dark:bg-gray-800 rounded-xl shadow-md overflow-hidden">
                <div className="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                  <h2 className="text-lg font-medium text-gray-900 dark:text-white">Recent Activity</h2>
                </div>
                
                <div className="divide-y divide-gray-200 dark:divide-gray-700">
                  {userInfo.recentActivity?.length > 0 ? (
                    userInfo.recentActivity.map((activity) => (
                      <div key={activity.id} className="p-6 flex items-start">
                        <div className="bg-blue-100 dark:bg-blue-900 p-2 rounded-full mr-4">
                          {activity.type === 'case' ? (
                            <Briefcase className="w-5 h-5 text-blue-600 dark:text-blue-400" />
                          ) : activity.type === 'document' ? (
                            <FileText className="w-5 h-5 text-blue-600 dark:text-blue-400" />
                          ) : (
                            <MessageSquare className="w-5 h-5 text-blue-600 dark:text-blue-400" />
                          )}
                        </div>
                        <div>
                          <p className="text-gray-900 dark:text-white">{activity.description}</p>
                          <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">{activity.date}</p>
                        </div>
                      </div>
                    ))
                  ) : (
                    <div className="p-6">
                      <p className="text-gray-500 dark:text-gray-400 text-sm">No recent activity</p>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        )}
        
        {/* Security Tab Content */}
        {activeTab === 'security' && (
          <SecurityTab userInfo={userInfo} showMessage={showMessage} />
        )}
