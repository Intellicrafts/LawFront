import React, { useState, useEffect, useRef, useCallback } from 'react';
import { useSelector } from 'react-redux';
import { 
  Mic, 
  MicOff, 
  Volume2, 
  Square, 
  MessageCircle, 
  X, 
  Wand2, 
  Trash2, 
  CornerDownLeft, 
  Loader, 
  Sparkles,
  Headphones,
  Rewind,
  FastForward,
  Play,
  Pause,
  History
} from 'lucide-react';

const VoiceModal = ({ isOpen, onClose, onVoiceResult }) => {
  // Get theme from Redux
  const { mode } = useSelector((state) => state.theme);
  const isDarkMode = mode === 'dark';

  // State management
  const [isListening, setIsListening] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [audioLevel, setAudioLevel] = useState(0);
  const [conversation, setConversation] = useState([]);
  const [currentTranscript, setCurrentTranscript] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  const [isClosing, setIsClosing] = useState(false);
  const [showConversation, setShowConversation] = useState(false);
  const [animationState, setAnimationState] = useState('initial'); // 'initial', 'entering', 'entered', 'exiting'
  
  // Create refs
  const modalContentRef = useRef(null);
  const conversationRef = useRef(null);
  
  // Scroll to bottom of conversation when new messages are added
  useEffect(() => {
    if (conversationRef.current) {
      conversationRef.current.scrollTop = conversationRef.current.scrollHeight;
    }
  }, [conversation]);

  // Handle modal opening animation
  useEffect(() => {
    if (isOpen) {
      // Prevent body scrolling when modal is open
      document.body.style.overflow = 'hidden';
      setAnimationState('entering');
      setTimeout(() => {
        setAnimationState('entered');
      }, 50); // Small delay to ensure CSS transition works
    } else {
      // Re-enable body scrolling when modal is closed
      document.body.style.overflow = 'auto';
    }
    
    // Cleanup function to ensure body scrolling is re-enabled
    return () => {
      document.body.style.overflow = 'auto';
    };
  }, [isOpen]);

  // Simulate audio level animation
  useEffect(() => {
    if (isListening) {
      const interval = setInterval(() => {
        setAudioLevel(Math.random() * 100);
      }, 100);
      return () => clearInterval(interval);
    } else {
      setAudioLevel(0);
    }
  }, [isListening]);

  // Reset state when modal closes
  useEffect(() => {
    if (!isOpen) {
      setIsListening(false);
      setIsSpeaking(false);
      setCurrentTranscript('');
      setIsProcessing(false);
      setAnimationState('initial');
      // Keep conversation history for user reference
    }
  }, [isOpen]);
  
  // Add keyboard event listener for Escape key
  useEffect(() => {
    const handleKeyDown = (event) => {
      if (event.key === 'Escape' && isOpen) {
        handleCloseWithAnimation();
      } else if (event.key === ' ' && isOpen) {
        // Toggle listening state on spacebar press
        if (isListening) {
          handleStopListening();
        } else if (!isSpeaking && !isProcessing) {
          handleStartListening();
        }
        // Prevent page scrolling
        event.preventDefault();
      }
    };
    
    window.addEventListener('keydown', handleKeyDown);
    
    // Clean up event listener on component unmount
    return () => {
      window.removeEventListener('keydown', handleKeyDown);
    };
  }, [isOpen, isListening, isSpeaking, isProcessing]);

  // Simulate conversation flow
  const handleStartListening = useCallback(() => {
    setIsListening(true);
    setCurrentTranscript('');
    
    // Simulate real-time transcription
    setTimeout(() => {
      setCurrentTranscript('What are the legal implications of...');
    }, 1000);
    setTimeout(() => {
      setCurrentTranscript('What are the legal implications of contract breach?');
    }, 2500);
    
    // Auto stop after 5 seconds and respond
    setTimeout(() => {
      setIsListening(false);
      handleAIResponse();
    }, 5000);
  }, []);

  const handleStopListening = useCallback(() => {
    setIsListening(false);
    if (currentTranscript) {
      handleAIResponse();
    }
  }, [currentTranscript]);

  const handleAIResponse = useCallback(() => {
    if (!currentTranscript) return;
    
    setIsProcessing(true);
    
    // Add user message
    const userMessage = currentTranscript;
    setConversation(prev => [...prev, { type: 'user', text: userMessage, timestamp: new Date() }]);
    
    // Optional: Send transcript back to parent component
    if (onVoiceResult) {
      onVoiceResult(currentTranscript);
    }
    
    setCurrentTranscript('');
    
    // AI response simulation
    setTimeout(() => {
      setIsProcessing(false);
      setIsSpeaking(true);
      
      const aiResponses = [
        "Contract breach occurs when one party fails to fulfill their obligations. The legal implications include potential damages, specific performance remedies, and possible termination rights. Would you like me to elaborate on any specific aspect?",
        "Based on your question about legal implications, I can provide detailed guidance on contract law, liability issues, and potential remedies available to you.",
        "That's an excellent legal question. Let me break down the key considerations and provide you with actionable legal insights."
      ];
      
      const aiResponse = aiResponses[Math.floor(Math.random() * aiResponses.length)];
      
      setConversation(prev => [...prev, { type: 'ai', text: aiResponse, timestamp: new Date() }]);
      
      // Simulate speaking duration based on text length
      const speakingDuration = Math.max(3000, aiResponse.length * 50);
      setTimeout(() => {
        setIsSpeaking(false);
      }, speakingDuration);
    }, 1500);
  }, [currentTranscript, onVoiceResult]);

  const handleClearConversation = useCallback(() => {
    setConversation([]);
  }, []);

  const handleCloseModal = useCallback(() => {
    // Call the onClose prop to properly close the modal and return to chatbot
    if (onClose) {
      onClose();
    }
    // Reset state
    setIsListening(false);
    setIsSpeaking(false);
    setCurrentTranscript('');
    setIsProcessing(false);
    setShowConversation(false);
  }, [onClose]);

  // Enhanced close handler with animation
  const handleCloseWithAnimation = useCallback(() => {
    setAnimationState('exiting');
    setIsClosing(true);
    // Wait for animation to complete before actually closing
    setTimeout(() => {
      handleCloseModal();
      setIsClosing(false);
    }, 400); // Match this with the CSS transition duration
  }, [handleCloseModal]);
  
  // Handle click outside
  const handleBackdropClick = useCallback((e) => {
    // Only close if clicking on the backdrop, not the modal content
    if (modalContentRef.current && !modalContentRef.current.contains(e.target)) {
      handleCloseWithAnimation();
    }
  }, [handleCloseWithAnimation]);
  
  // Toggle conversation history
  const toggleConversation = useCallback(() => {
    setShowConversation(prev => !prev);
  }, []);

  if (!isOpen) return null;

  return (
    <div 
      className={`fixed inset-0 z-[9999] flex items-center justify-center transition-all duration-500 ${
        animationState === 'entering' ? 'backdrop-blur-0 bg-opacity-0' : 
        animationState === 'entered' ? 'backdrop-blur-md bg-opacity-50' : 
        animationState === 'exiting' ? 'backdrop-blur-0 bg-opacity-0' : 'backdrop-blur-0 bg-opacity-0'
      } ${isDarkMode ? 'bg-slate-900/90' : 'bg-slate-900/30'}`}
      onClick={handleBackdropClick}
    >
      <div 
        ref={modalContentRef}
        className={`relative w-full max-w-5xl mx-auto rounded-2xl overflow-hidden shadow-2xl transition-all duration-500 ease-out ${
          isDarkMode 
            ? 'bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 border border-slate-700' 
            : 'bg-gradient-to-br from-white via-slate-50 to-white border border-slate-200'
        } ${
          animationState === 'entering' ? 'scale-95 opacity-0 translate-y-8' : 
          animationState === 'entered' ? 'scale-100 opacity-100 translate-y-0' : 
          animationState === 'exiting' ? 'scale-95 opacity-0 translate-y-8' : 'scale-95 opacity-0 translate-y-8'
        }`}
        style={{ 
          maxHeight: '90vh',
          height: showConversation ? '80vh' : 'auto'
        }}
      >
        {/* Glass effect overlay */}
        <div className="absolute inset-0 backdrop-blur-[1px] bg-opacity-10 pointer-events-none"></div>

        {/* Close button */}
        <button
          onClick={handleCloseWithAnimation}
          className={`absolute top-4 right-4 p-2 rounded-full z-50 transition-all duration-300 ${
            isDarkMode 
              ? 'bg-slate-700 text-slate-300 hover:bg-slate-600 hover:text-white' 
              : 'bg-slate-200 text-slate-600 hover:bg-slate-300 hover:text-slate-800'
          } focus:outline-none focus:ring-2 focus:ring-blue-500 transform hover:rotate-90`}
          aria-label="Close Voice Assistant"
        >
          <X className="w-5 h-5" />
        </button>

        {/* Header */}
        <div className={`p-6 flex items-center justify-between border-b ${
          isDarkMode ? 'border-slate-700' : 'border-slate-200'
        }`}>
          <div className="flex items-center space-x-3">
            <div className={`w-10 h-10 rounded-full flex items-center justify-center ${
              isDarkMode ? 'bg-blue-600' : 'bg-blue-500'
            }`}>
              <Headphones className="w-5 h-5 text-white" />
            </div>
            <div>
              <h2 className={`text-xl font-semibold ${
                isDarkMode ? 'text-white' : 'text-slate-800'
              }`}>Voice Assistant</h2>
              <p className={`text-sm ${
                isDarkMode ? 'text-slate-400' : 'text-slate-500'
              }`}>Ask legal questions with your voice</p>
            </div>
          </div>
          
          <div className="flex items-center space-x-2">
            <span className={`text-xs px-2 py-1 rounded-full ${
              isDarkMode 
                ? 'bg-slate-700 text-slate-300' 
                : 'bg-slate-200 text-slate-600'
            }`}>
              Press ESC to close
            </span>
            <button
              onClick={toggleConversation}
              className={`p-2 rounded-full transition-colors ${
                isDarkMode 
                  ? 'bg-slate-700 text-slate-300 hover:bg-slate-600 hover:text-white' 
                  : 'bg-slate-200 text-slate-600 hover:bg-slate-300 hover:text-slate-800'
              } ${showConversation ? 'ring-2 ring-blue-500' : ''}`}
              aria-label={showConversation ? "Hide conversation history" : "Show conversation history"}
            >
              <History className="w-5 h-5" />
            </button>
          </div>
        </div>

        <div className={`flex flex-col md:flex-row ${showConversation ? 'h-full' : ''}`}>
          {/* Main Voice Interface */}
          <div className={`flex-1 p-6 flex flex-col items-center justify-center ${
            showConversation ? 'md:border-r' : ''
          } ${isDarkMode ? 'md:border-slate-700' : 'md:border-slate-200'}`}>
            {/* Voice Visualization */}
            <div className={`relative w-64 h-64 rounded-full flex items-center justify-center transition-all duration-500 ${
              isListening
                ? `${isDarkMode ? 'bg-blue-900/30' : 'bg-blue-100'} animate-pulse`
                : isSpeaking
                ? `${isDarkMode ? 'bg-indigo-900/30' : 'bg-indigo-100'}`
                : isProcessing
                ? `${isDarkMode ? 'bg-emerald-900/30' : 'bg-emerald-100'}`
                : `${isDarkMode ? 'bg-slate-800/50' : 'bg-slate-100'}`
            }`}>
              {/* Main visualization */}
              <div className={`absolute inset-4 rounded-full overflow-hidden shadow-lg ${
                isDarkMode ? 'shadow-blue-900/20' : 'shadow-blue-500/20'
              }`}>
                <img
                  src="/modal.gif"
                  alt="Voice activity visualization"
                  className={`w-full h-full object-cover ${isDarkMode ? 'opacity-90 contrast-125 brightness-75' : 'opacity-100'}`}
                />
                
                {/* Overlay for better visibility in dark mode */}
                {isDarkMode && (
                  <div className="absolute inset-0 bg-blue-900/10 mix-blend-overlay"></div>
                )}
              </div>
              
              {/* Animated rings */}
              {(isListening || isSpeaking) && (
                <>
                  <div className={`absolute inset-0 rounded-full border-4 animate-ping opacity-20 ${
                    isListening 
                      ? 'border-blue-500' 
                      : 'border-indigo-500'
                  }`} style={{ animationDuration: '2s' }} />
                  <div className={`absolute inset-0 rounded-full border-4 animate-ping opacity-10 ${
                    isListening 
                      ? 'border-blue-500' 
                      : 'border-indigo-500'
                  }`} style={{ animationDuration: '3s', animationDelay: '0.5s' }} />
                </>
              )}
              
              {/* Status icon overlay */}
              <div className={`absolute bottom-0 right-0 w-16 h-16 rounded-full flex items-center justify-center ${
                isListening
                  ? `${isDarkMode ? 'bg-blue-600' : 'bg-blue-500'}`
                  : isSpeaking
                  ? `${isDarkMode ? 'bg-indigo-600' : 'bg-indigo-500'}`
                  : isProcessing
                  ? `${isDarkMode ? 'bg-emerald-600' : 'bg-emerald-500'}`
                  : `${isDarkMode ? 'bg-slate-700' : 'bg-slate-300'}`
              } shadow-lg transform translate-x-1/4 translate-y-1/4 z-10`}>
                {isListening ? (
                  <Mic className="w-8 h-8 text-white animate-pulse" />
                ) : isSpeaking ? (
                  <Volume2 className="w-8 h-8 text-white animate-pulse" />
                ) : isProcessing ? (
                  <Loader className="w-8 h-8 text-white animate-spin" />
                ) : (
                  <Mic className="w-8 h-8 text-white" />
                )}
              </div>
              
              {/* Audio level visualization */}
              {isListening && (
                <div className="absolute -bottom-8 left-1/2 transform -translate-x-1/2 flex items-end space-x-1 h-8">
                  {[...Array(12)].map((_, i) => {
                    const barHeight = Math.max(4, Math.min(32, (audioLevel + i * 5) % 32));
                    return (
                      <div
                        key={i}
                        className={`w-1 rounded-full transition-all duration-100 ${
                          isDarkMode ? 'bg-blue-500' : 'bg-blue-500'
                        }`}
                        style={{
                          height: `${barHeight}px`,
                          opacity: barHeight / 32,
                        }}
                      />
                    );
                  })}
                </div>
              )}
            </div>

            {/* Status text */}
            <div className="mt-8 text-center">
              {isListening ? (
                <div className={`text-lg font-medium ${isDarkMode ? 'text-blue-400' : 'text-blue-600'} animate-pulse flex items-center justify-center`}>
                  <Mic className="w-5 h-5 mr-2" />
                  Listening...
                </div>
              ) : isSpeaking ? (
                <div className={`text-lg font-medium ${isDarkMode ? 'text-indigo-400' : 'text-indigo-600'} animate-pulse flex items-center justify-center`}>
                  <Volume2 className="w-5 h-5 mr-2" />
                  Speaking...
                </div>
              ) : isProcessing ? (
                <div className={`text-lg font-medium ${isDarkMode ? 'text-emerald-400' : 'text-emerald-600'} flex items-center justify-center`}>
                  <Loader className="w-5 h-5 mr-2 animate-spin" />
                  Processing...
                </div>
              ) : (
                <div className={`text-lg font-medium ${isDarkMode ? 'text-slate-400' : 'text-slate-600'} flex items-center justify-center`}>
                  <Sparkles className="w-5 h-5 mr-2" />
                  Ready to assist
                </div>
              )}
            </div>

            {/* Current transcript */}
            {currentTranscript && (
              <div className={`mt-6 p-4 rounded-xl max-w-md text-center transition-all duration-300 ${
                isDarkMode 
                  ? 'bg-slate-800 border border-slate-700 text-white' 
                  : 'bg-white border border-slate-200 text-slate-800 shadow-md'
              }`}>
                <p className="italic">"{currentTranscript}"</p>
              </div>
            )}

            {/* Controls */}
            <div className="mt-8 flex flex-wrap justify-center gap-4">
              {!isListening ? (
                <button
                  onClick={handleStartListening}
                  disabled={isSpeaking || isProcessing}
                  className={`px-6 py-3 rounded-full text-white font-medium shadow-lg transition-all duration-300 flex items-center space-x-2 ${
                    isDarkMode 
                      ? 'bg-blue-600 hover:bg-blue-500 disabled:bg-blue-800 shadow-blue-900/30' 
                      : 'bg-blue-500 hover:bg-blue-600 disabled:bg-blue-300 shadow-blue-500/30'
                  } disabled:cursor-not-allowed disabled:opacity-70 transform hover:scale-105 active:scale-95`}
                >
                  <Mic className="w-5 h-5" />
                  <span>Start Speaking</span>
                </button>
              ) : (
                <button
                  onClick={handleStopListening}
                  className={`px-6 py-3 rounded-full text-white font-medium shadow-lg transition-all duration-300 flex items-center space-x-2 ${
                    isDarkMode 
                      ? 'bg-red-600 hover:bg-red-500 shadow-red-900/30' 
                      : 'bg-red-500 hover:bg-red-600 shadow-red-500/30'
                  } transform hover:scale-105 active:scale-95`}
                >
                  <Square className="w-5 h-5" />
                  <span>Stop</span>
                </button>
              )}

              {conversation.length > 0 && (
                <button
                  onClick={handleClearConversation}
                  className={`px-6 py-3 rounded-full font-medium transition-all duration-300 flex items-center space-x-2 ${
                    isDarkMode 
                      ? 'bg-slate-700 text-slate-300 hover:bg-slate-600 hover:text-white' 
                      : 'bg-slate-200 text-slate-700 hover:bg-slate-300 hover:text-slate-800'
                  } transform hover:scale-105 active:scale-95`}
                >
                  <Trash2 className="w-5 h-5" />
                  <span>Clear History</span>
                </button>
              )}
            </div>

            {/* Keyboard shortcuts */}
            <div className={`mt-8 grid grid-cols-2 gap-4 text-sm ${
              isDarkMode ? 'text-slate-400' : 'text-slate-600'
            }`}>
              <div className="flex items-center">
                <kbd className={`px-2 py-1 rounded mr-2 ${
                  isDarkMode ? 'bg-slate-700 text-slate-300' : 'bg-slate-200 text-slate-700'
                }`}>Space</kbd>
                <span>Start/Stop speaking</span>
              </div>
              <div className="flex items-center">
                <kbd className={`px-2 py-1 rounded mr-2 ${
                  isDarkMode ? 'bg-slate-700 text-slate-300' : 'bg-slate-200 text-slate-700'
                }`}>Esc</kbd>
                <span>Close assistant</span>
              </div>
            </div>
          </div>

          {/* Conversation History */}
          {showConversation && (
            <div className={`w-full md:w-1/2 flex flex-col transition-all duration-500 ${
              showConversation ? 'opacity-100 h-auto' : 'opacity-0 h-0 overflow-hidden'
            }`}>
              <div className={`p-4 border-b ${
                isDarkMode ? 'border-slate-700 text-white' : 'border-slate-200 text-slate-800'
              }`}>
                <h3 className="font-medium">Conversation History</h3>
              </div>
              
              <div 
                ref={conversationRef}
                className="flex-1 overflow-y-auto p-4 space-y-4"
                style={{ maxHeight: 'calc(80vh - 12rem)' }}
              >
                {conversation.length === 0 ? (
                  <div className={`flex flex-col items-center justify-center h-full text-center ${
                    isDarkMode ? 'text-slate-500' : 'text-slate-400'
                  }`}>
                    <MessageCircle className="w-12 h-12 mb-4 opacity-50" />
                    <p>No conversation history yet.</p>
                    <p className="text-sm mt-2">Start speaking to see your conversation here.</p>
                  </div>
                ) : (
                  conversation.map((msg, index) => (
                    <div 
                      key={index}
                      className={`flex ${msg.type === 'user' ? 'justify-end' : 'justify-start'}`}
                    >
                      <div className={`max-w-xs md:max-w-sm rounded-2xl px-4 py-3 ${
                        msg.type === 'user'
                          ? isDarkMode 
                            ? 'bg-blue-600 text-white ml-12' 
                            : 'bg-blue-500 text-white ml-12'
                          : isDarkMode
                            ? 'bg-slate-700 text-white mr-12 border border-slate-600' 
                            : 'bg-white text-slate-800 mr-12 border border-slate-200 shadow-sm'
                      }`}>
                        <div className="flex items-start">
                          {msg.type === 'ai' && (
                            <Sparkles className={`w-4 h-4 mt-1 mr-2 flex-shrink-0 ${
                              isDarkMode ? 'text-blue-400' : 'text-blue-500'
                            }`} />
                          )}
                          <p className="text-sm">{msg.text}</p>
                        </div>
                        <div className={`text-xs mt-1 text-right ${
                          msg.type === 'user'
                            ? 'text-blue-200'
                            : isDarkMode ? 'text-slate-400' : 'text-slate-500'
                        }`}>
                          {new Date(msg.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                        </div>
                      </div>
                    </div>
                  ))
                )}
              </div>
              
              {/* Playback controls */}
              {conversation.length > 0 && (
                <div className={`p-4 border-t ${
                  isDarkMode ? 'border-slate-700' : 'border-slate-200'
                }`}>
                  <div className="flex items-center justify-between">
                    <div className="flex space-x-2">
                      <button className={`p-2 rounded-full ${
                        isDarkMode 
                          ? 'bg-slate-700 text-slate-300 hover:bg-slate-600 hover:text-white' 
                          : 'bg-slate-200 text-slate-600 hover:bg-slate-300 hover:text-slate-800'
                      } transition-colors`}>
                        <Rewind className="w-4 h-4" />
                      </button>
                      <button className={`p-2 rounded-full ${
                        isDarkMode 
                          ? 'bg-blue-600 text-white hover:bg-blue-500' 
                          : 'bg-blue-500 text-white hover:bg-blue-600'
                      } transition-colors`}>
                        <Play className="w-4 h-4" />
                      </button>
                      <button className={`p-2 rounded-full ${
                        isDarkMode 
                          ? 'bg-slate-700 text-slate-300 hover:bg-slate-600 hover:text-white' 
                          : 'bg-slate-200 text-slate-600 hover:bg-slate-300 hover:text-slate-800'
                      } transition-colors`}>
                        <FastForward className="w-4 h-4" />
                      </button>
                    </div>
                    <button 
                      onClick={handleClearConversation}
                      className={`p-2 rounded-full ${
                        isDarkMode 
                          ? 'bg-slate-700 text-slate-300 hover:bg-slate-600 hover:text-white' 
                          : 'bg-slate-200 text-slate-600 hover:bg-slate-300 hover:text-slate-800'
                      } transition-colors`}
                    >
                      <Trash2 className="w-4 h-4" />
                    </button>
                  </div>
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default VoiceModal;
